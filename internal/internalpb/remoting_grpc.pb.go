// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/remoting.proto

package internalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RemotingService_RemoteAsk_FullMethodName           = "/internalpb.RemotingService/RemoteAsk"
	RemotingService_RemoteTell_FullMethodName          = "/internalpb.RemotingService/RemoteTell"
	RemotingService_RemoteLookup_FullMethodName        = "/internalpb.RemotingService/RemoteLookup"
	RemotingService_RemoteReSpawn_FullMethodName       = "/internalpb.RemotingService/RemoteReSpawn"
	RemotingService_RemoteStop_FullMethodName          = "/internalpb.RemotingService/RemoteStop"
	RemotingService_RemoteSpawn_FullMethodName         = "/internalpb.RemotingService/RemoteSpawn"
	RemotingService_RemoteReinstate_FullMethodName     = "/internalpb.RemotingService/RemoteReinstate"
	RemotingService_RemoteAskGrain_FullMethodName      = "/internalpb.RemotingService/RemoteAskGrain"
	RemotingService_RemoteTellGrain_FullMethodName     = "/internalpb.RemotingService/RemoteTellGrain"
	RemotingService_RemoteActivateGrain_FullMethodName = "/internalpb.RemotingService/RemoteActivateGrain"
)

// RemotingServiceClient is the client API for RemotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RemotingService defines the remoting service
// With remoting one can:
// - send messages to actors
// - lookup actor remotely
// - spawn actor remotely
// - re-spawn actor remotely
// - stop actor remotely
type RemotingServiceClient interface {
	// RemoteAsk is used to send a message to an actor remotely and expect a response immediately.
	RemoteAsk(ctx context.Context, in *RemoteAskRequest, opts ...grpc.CallOption) (*RemoteAskResponse, error)
	// RemoteTell is used to send a message to a remote actor
	// The actor on the other line can reply to the sender by using the Sender in the message
	RemoteTell(ctx context.Context, in *RemoteTellRequest, opts ...grpc.CallOption) (*RemoteTellResponse, error)
	// Lookup for an actor on a remote host.
	RemoteLookup(ctx context.Context, in *RemoteLookupRequest, opts ...grpc.CallOption) (*RemoteLookupResponse, error)
	// RemoteReSpawn restarts an actor on a remote machine
	RemoteReSpawn(ctx context.Context, in *RemoteReSpawnRequest, opts ...grpc.CallOption) (*RemoteReSpawnResponse, error)
	// RemoteStop stops an actor on a remote machine
	RemoteStop(ctx context.Context, in *RemoteStopRequest, opts ...grpc.CallOption) (*RemoteStopResponse, error)
	// RemoteSpawn starts an actor on a remote machine
	RemoteSpawn(ctx context.Context, in *RemoteSpawnRequest, opts ...grpc.CallOption) (*RemoteSpawnResponse, error)
	// RemoteReinstate reinstates an actor on a remote machine
	RemoteReinstate(ctx context.Context, in *RemoteReinstateRequest, opts ...grpc.CallOption) (*RemoteReinstateResponse, error)
	// RemoteAskGrain is used to send a message to Grain on a remote node
	RemoteAskGrain(ctx context.Context, in *RemoteAskGrainRequest, opts ...grpc.CallOption) (*RemoteAskGrainResponse, error)
	// RemoteTellGrain is used to send a message to Grain on a remote node
	RemoteTellGrain(ctx context.Context, in *RemoteTellGrainRequest, opts ...grpc.CallOption) (*RemoteTellGrainResponse, error)
	// RemoteActivateGrain is used to activate a Grain on a remote node
	RemoteActivateGrain(ctx context.Context, in *RemoteActivateGrainRequest, opts ...grpc.CallOption) (*RemoteActivateGrainResponse, error)
}

type remotingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemotingServiceClient(cc grpc.ClientConnInterface) RemotingServiceClient {
	return &remotingServiceClient{cc}
}

func (c *remotingServiceClient) RemoteAsk(ctx context.Context, in *RemoteAskRequest, opts ...grpc.CallOption) (*RemoteAskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteAskResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteAsk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteTell(ctx context.Context, in *RemoteTellRequest, opts ...grpc.CallOption) (*RemoteTellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteTellResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteTell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteLookup(ctx context.Context, in *RemoteLookupRequest, opts ...grpc.CallOption) (*RemoteLookupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteLookupResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteLookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteReSpawn(ctx context.Context, in *RemoteReSpawnRequest, opts ...grpc.CallOption) (*RemoteReSpawnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteReSpawnResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteReSpawn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteStop(ctx context.Context, in *RemoteStopRequest, opts ...grpc.CallOption) (*RemoteStopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteStopResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteSpawn(ctx context.Context, in *RemoteSpawnRequest, opts ...grpc.CallOption) (*RemoteSpawnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteSpawnResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteSpawn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteReinstate(ctx context.Context, in *RemoteReinstateRequest, opts ...grpc.CallOption) (*RemoteReinstateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteReinstateResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteReinstate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteAskGrain(ctx context.Context, in *RemoteAskGrainRequest, opts ...grpc.CallOption) (*RemoteAskGrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteAskGrainResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteAskGrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteTellGrain(ctx context.Context, in *RemoteTellGrainRequest, opts ...grpc.CallOption) (*RemoteTellGrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteTellGrainResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteTellGrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remotingServiceClient) RemoteActivateGrain(ctx context.Context, in *RemoteActivateGrainRequest, opts ...grpc.CallOption) (*RemoteActivateGrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteActivateGrainResponse)
	err := c.cc.Invoke(ctx, RemotingService_RemoteActivateGrain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemotingServiceServer is the server API for RemotingService service.
// All implementations should embed UnimplementedRemotingServiceServer
// for forward compatibility.
//
// RemotingService defines the remoting service
// With remoting one can:
// - send messages to actors
// - lookup actor remotely
// - spawn actor remotely
// - re-spawn actor remotely
// - stop actor remotely
type RemotingServiceServer interface {
	// RemoteAsk is used to send a message to an actor remotely and expect a response immediately.
	RemoteAsk(context.Context, *RemoteAskRequest) (*RemoteAskResponse, error)
	// RemoteTell is used to send a message to a remote actor
	// The actor on the other line can reply to the sender by using the Sender in the message
	RemoteTell(context.Context, *RemoteTellRequest) (*RemoteTellResponse, error)
	// Lookup for an actor on a remote host.
	RemoteLookup(context.Context, *RemoteLookupRequest) (*RemoteLookupResponse, error)
	// RemoteReSpawn restarts an actor on a remote machine
	RemoteReSpawn(context.Context, *RemoteReSpawnRequest) (*RemoteReSpawnResponse, error)
	// RemoteStop stops an actor on a remote machine
	RemoteStop(context.Context, *RemoteStopRequest) (*RemoteStopResponse, error)
	// RemoteSpawn starts an actor on a remote machine
	RemoteSpawn(context.Context, *RemoteSpawnRequest) (*RemoteSpawnResponse, error)
	// RemoteReinstate reinstates an actor on a remote machine
	RemoteReinstate(context.Context, *RemoteReinstateRequest) (*RemoteReinstateResponse, error)
	// RemoteAskGrain is used to send a message to Grain on a remote node
	RemoteAskGrain(context.Context, *RemoteAskGrainRequest) (*RemoteAskGrainResponse, error)
	// RemoteTellGrain is used to send a message to Grain on a remote node
	RemoteTellGrain(context.Context, *RemoteTellGrainRequest) (*RemoteTellGrainResponse, error)
	// RemoteActivateGrain is used to activate a Grain on a remote node
	RemoteActivateGrain(context.Context, *RemoteActivateGrainRequest) (*RemoteActivateGrainResponse, error)
}

// UnimplementedRemotingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemotingServiceServer struct{}

func (UnimplementedRemotingServiceServer) RemoteAsk(context.Context, *RemoteAskRequest) (*RemoteAskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteAsk not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteTell(context.Context, *RemoteTellRequest) (*RemoteTellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteTell not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteLookup(context.Context, *RemoteLookupRequest) (*RemoteLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteLookup not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteReSpawn(context.Context, *RemoteReSpawnRequest) (*RemoteReSpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteReSpawn not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteStop(context.Context, *RemoteStopRequest) (*RemoteStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteStop not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteSpawn(context.Context, *RemoteSpawnRequest) (*RemoteSpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteSpawn not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteReinstate(context.Context, *RemoteReinstateRequest) (*RemoteReinstateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteReinstate not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteAskGrain(context.Context, *RemoteAskGrainRequest) (*RemoteAskGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteAskGrain not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteTellGrain(context.Context, *RemoteTellGrainRequest) (*RemoteTellGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteTellGrain not implemented")
}
func (UnimplementedRemotingServiceServer) RemoteActivateGrain(context.Context, *RemoteActivateGrainRequest) (*RemoteActivateGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteActivateGrain not implemented")
}
func (UnimplementedRemotingServiceServer) testEmbeddedByValue() {}

// UnsafeRemotingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemotingServiceServer will
// result in compilation errors.
type UnsafeRemotingServiceServer interface {
	mustEmbedUnimplementedRemotingServiceServer()
}

func RegisterRemotingServiceServer(s grpc.ServiceRegistrar, srv RemotingServiceServer) {
	// If the following call pancis, it indicates UnimplementedRemotingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemotingService_ServiceDesc, srv)
}

func _RemotingService_RemoteAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteAskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteAsk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteAsk(ctx, req.(*RemoteAskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteTell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteTell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteTell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteTell(ctx, req.(*RemoteTellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteLookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteLookup(ctx, req.(*RemoteLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteReSpawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteReSpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteReSpawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteReSpawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteReSpawn(ctx, req.(*RemoteReSpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteStop(ctx, req.(*RemoteStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteSpawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteSpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteSpawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteSpawn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteSpawn(ctx, req.(*RemoteSpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteReinstate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteReinstateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteReinstate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteReinstate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteReinstate(ctx, req.(*RemoteReinstateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteAskGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteAskGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteAskGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteAskGrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteAskGrain(ctx, req.(*RemoteAskGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteTellGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteTellGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteTellGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteTellGrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteTellGrain(ctx, req.(*RemoteTellGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemotingService_RemoteActivateGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteActivateGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemotingServiceServer).RemoteActivateGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemotingService_RemoteActivateGrain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemotingServiceServer).RemoteActivateGrain(ctx, req.(*RemoteActivateGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemotingService_ServiceDesc is the grpc.ServiceDesc for RemotingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemotingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalpb.RemotingService",
	HandlerType: (*RemotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteAsk",
			Handler:    _RemotingService_RemoteAsk_Handler,
		},
		{
			MethodName: "RemoteTell",
			Handler:    _RemotingService_RemoteTell_Handler,
		},
		{
			MethodName: "RemoteLookup",
			Handler:    _RemotingService_RemoteLookup_Handler,
		},
		{
			MethodName: "RemoteReSpawn",
			Handler:    _RemotingService_RemoteReSpawn_Handler,
		},
		{
			MethodName: "RemoteStop",
			Handler:    _RemotingService_RemoteStop_Handler,
		},
		{
			MethodName: "RemoteSpawn",
			Handler:    _RemotingService_RemoteSpawn_Handler,
		},
		{
			MethodName: "RemoteReinstate",
			Handler:    _RemotingService_RemoteReinstate_Handler,
		},
		{
			MethodName: "RemoteAskGrain",
			Handler:    _RemotingService_RemoteAskGrain_Handler,
		},
		{
			MethodName: "RemoteTellGrain",
			Handler:    _RemotingService_RemoteTellGrain_Handler,
		},
		{
			MethodName: "RemoteActivateGrain",
			Handler:    _RemotingService_RemoteActivateGrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/remoting.proto",
}
