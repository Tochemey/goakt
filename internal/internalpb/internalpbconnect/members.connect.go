// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/members.proto

package internalpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	internalpb "github.com/tochemey/goakt/v2/internal/internalpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MembersServiceName is the fully-qualified name of the MembersService service.
	MembersServiceName = "internalpb.MembersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MembersServiceRemoveActorProcedure is the fully-qualified name of the MembersService's
	// RemoveActor RPC.
	MembersServiceRemoveActorProcedure = "/internalpb.MembersService/RemoveActor"
	// MembersServiceRemoveKeyProcedure is the fully-qualified name of the MembersService's RemoveKey
	// RPC.
	MembersServiceRemoveKeyProcedure = "/internalpb.MembersService/RemoveKey"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	membersServiceServiceDescriptor           = internalpb.File_internal_members_proto.Services().ByName("MembersService")
	membersServiceRemoveActorMethodDescriptor = membersServiceServiceDescriptor.Methods().ByName("RemoveActor")
	membersServiceRemoveKeyMethodDescriptor   = membersServiceServiceDescriptor.Methods().ByName("RemoveKey")
)

// MembersServiceClient is a client for the internalpb.MembersService service.
type MembersServiceClient interface {
	// RemoveActor removes an actor from the cluster
	RemoveActor(context.Context, *connect.Request[internalpb.RemoveActorRequest]) (*connect.Response[internalpb.RemoveActorResponse], error)
	// RemoveKey removes a key from the cluster
	RemoveKey(context.Context, *connect.Request[internalpb.RemoveKeyRequest]) (*connect.Response[internalpb.RemoveKeyResponse], error)
}

// NewMembersServiceClient constructs a client for the internalpb.MembersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMembersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MembersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &membersServiceClient{
		removeActor: connect.NewClient[internalpb.RemoveActorRequest, internalpb.RemoveActorResponse](
			httpClient,
			baseURL+MembersServiceRemoveActorProcedure,
			connect.WithSchema(membersServiceRemoveActorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeKey: connect.NewClient[internalpb.RemoveKeyRequest, internalpb.RemoveKeyResponse](
			httpClient,
			baseURL+MembersServiceRemoveKeyProcedure,
			connect.WithSchema(membersServiceRemoveKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// membersServiceClient implements MembersServiceClient.
type membersServiceClient struct {
	removeActor *connect.Client[internalpb.RemoveActorRequest, internalpb.RemoveActorResponse]
	removeKey   *connect.Client[internalpb.RemoveKeyRequest, internalpb.RemoveKeyResponse]
}

// RemoveActor calls internalpb.MembersService.RemoveActor.
func (c *membersServiceClient) RemoveActor(ctx context.Context, req *connect.Request[internalpb.RemoveActorRequest]) (*connect.Response[internalpb.RemoveActorResponse], error) {
	return c.removeActor.CallUnary(ctx, req)
}

// RemoveKey calls internalpb.MembersService.RemoveKey.
func (c *membersServiceClient) RemoveKey(ctx context.Context, req *connect.Request[internalpb.RemoveKeyRequest]) (*connect.Response[internalpb.RemoveKeyResponse], error) {
	return c.removeKey.CallUnary(ctx, req)
}

// MembersServiceHandler is an implementation of the internalpb.MembersService service.
type MembersServiceHandler interface {
	// RemoveActor removes an actor from the cluster
	RemoveActor(context.Context, *connect.Request[internalpb.RemoveActorRequest]) (*connect.Response[internalpb.RemoveActorResponse], error)
	// RemoveKey removes a key from the cluster
	RemoveKey(context.Context, *connect.Request[internalpb.RemoveKeyRequest]) (*connect.Response[internalpb.RemoveKeyResponse], error)
}

// NewMembersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMembersServiceHandler(svc MembersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	membersServiceRemoveActorHandler := connect.NewUnaryHandler(
		MembersServiceRemoveActorProcedure,
		svc.RemoveActor,
		connect.WithSchema(membersServiceRemoveActorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	membersServiceRemoveKeyHandler := connect.NewUnaryHandler(
		MembersServiceRemoveKeyProcedure,
		svc.RemoveKey,
		connect.WithSchema(membersServiceRemoveKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/internalpb.MembersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MembersServiceRemoveActorProcedure:
			membersServiceRemoveActorHandler.ServeHTTP(w, r)
		case MembersServiceRemoveKeyProcedure:
			membersServiceRemoveKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMembersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMembersServiceHandler struct{}

func (UnimplementedMembersServiceHandler) RemoveActor(context.Context, *connect.Request[internalpb.RemoveActorRequest]) (*connect.Response[internalpb.RemoveActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.MembersService.RemoveActor is not implemented"))
}

func (UnimplementedMembersServiceHandler) RemoveKey(context.Context, *connect.Request[internalpb.RemoveKeyRequest]) (*connect.Response[internalpb.RemoveKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.MembersService.RemoveKey is not implemented"))
}
