// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/peers.proto

package internalpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	internalpb "github.com/tochemey/goakt/v2/internal/internalpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PeersServiceName is the fully-qualified name of the PeersService service.
	PeersServiceName = "internalpb.PeersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PeersServicePeersSyncProcedure is the fully-qualified name of the PeersService's PeersSync RPC.
	PeersServicePeersSyncProcedure = "/internalpb.PeersService/PeersSync"
	// PeersServiceRedeployProcedure is the fully-qualified name of the PeersService's Redeploy RPC.
	PeersServiceRedeployProcedure = "/internalpb.PeersService/Redeploy"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	peersServiceServiceDescriptor         = internalpb.File_internal_peers_proto.Services().ByName("PeersService")
	peersServicePeersSyncMethodDescriptor = peersServiceServiceDescriptor.Methods().ByName("PeersSync")
	peersServiceRedeployMethodDescriptor  = peersServiceServiceDescriptor.Methods().ByName("Redeploy")
)

// PeersServiceClient is a client for the internalpb.PeersService service.
type PeersServiceClient interface {
	// PeersSync synchronizes with other peers in the cluster
	PeersSync(context.Context, *connect.Request[internalpb.PeersSyncRequest]) (*connect.Response[internalpb.PeersSyncResponse], error)
	// Redeploy re-distributes actors amongst the cluster members
	Redeploy(context.Context, *connect.Request[internalpb.RedeployRequest]) (*connect.Response[internalpb.RedeployResponse], error)
}

// NewPeersServiceClient constructs a client for the internalpb.PeersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPeersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PeersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &peersServiceClient{
		peersSync: connect.NewClient[internalpb.PeersSyncRequest, internalpb.PeersSyncResponse](
			httpClient,
			baseURL+PeersServicePeersSyncProcedure,
			connect.WithSchema(peersServicePeersSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		redeploy: connect.NewClient[internalpb.RedeployRequest, internalpb.RedeployResponse](
			httpClient,
			baseURL+PeersServiceRedeployProcedure,
			connect.WithSchema(peersServiceRedeployMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// peersServiceClient implements PeersServiceClient.
type peersServiceClient struct {
	peersSync *connect.Client[internalpb.PeersSyncRequest, internalpb.PeersSyncResponse]
	redeploy  *connect.Client[internalpb.RedeployRequest, internalpb.RedeployResponse]
}

// PeersSync calls internalpb.PeersService.PeersSync.
func (c *peersServiceClient) PeersSync(ctx context.Context, req *connect.Request[internalpb.PeersSyncRequest]) (*connect.Response[internalpb.PeersSyncResponse], error) {
	return c.peersSync.CallUnary(ctx, req)
}

// Redeploy calls internalpb.PeersService.Redeploy.
func (c *peersServiceClient) Redeploy(ctx context.Context, req *connect.Request[internalpb.RedeployRequest]) (*connect.Response[internalpb.RedeployResponse], error) {
	return c.redeploy.CallUnary(ctx, req)
}

// PeersServiceHandler is an implementation of the internalpb.PeersService service.
type PeersServiceHandler interface {
	// PeersSync synchronizes with other peers in the cluster
	PeersSync(context.Context, *connect.Request[internalpb.PeersSyncRequest]) (*connect.Response[internalpb.PeersSyncResponse], error)
	// Redeploy re-distributes actors amongst the cluster members
	Redeploy(context.Context, *connect.Request[internalpb.RedeployRequest]) (*connect.Response[internalpb.RedeployResponse], error)
}

// NewPeersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPeersServiceHandler(svc PeersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	peersServicePeersSyncHandler := connect.NewUnaryHandler(
		PeersServicePeersSyncProcedure,
		svc.PeersSync,
		connect.WithSchema(peersServicePeersSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	peersServiceRedeployHandler := connect.NewUnaryHandler(
		PeersServiceRedeployProcedure,
		svc.Redeploy,
		connect.WithSchema(peersServiceRedeployMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/internalpb.PeersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PeersServicePeersSyncProcedure:
			peersServicePeersSyncHandler.ServeHTTP(w, r)
		case PeersServiceRedeployProcedure:
			peersServiceRedeployHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPeersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPeersServiceHandler struct{}

func (UnimplementedPeersServiceHandler) PeersSync(context.Context, *connect.Request[internalpb.PeersSyncRequest]) (*connect.Response[internalpb.PeersSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.PeersSync is not implemented"))
}

func (UnimplementedPeersServiceHandler) Redeploy(context.Context, *connect.Request[internalpb.RedeployRequest]) (*connect.Response[internalpb.RedeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.Redeploy is not implemented"))
}
