// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/peers.proto

package internalpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	internalpb "github.com/tochemey/goakt/v2/internal/internalpb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PeersServiceName is the fully-qualified name of the PeersService service.
	PeersServiceName = "internalpb.PeersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PeersServicePutPeerStateProcedure is the fully-qualified name of the PeersService's PutPeerState
	// RPC.
	PeersServicePutPeerStateProcedure = "/internalpb.PeersService/PutPeerState"
	// PeersServiceDeletePeerStateProcedure is the fully-qualified name of the PeersService's
	// DeletePeerState RPC.
	PeersServiceDeletePeerStateProcedure = "/internalpb.PeersService/DeletePeerState"
	// PeersServiceDeleteActorProcedure is the fully-qualified name of the PeersService's DeleteActor
	// RPC.
	PeersServiceDeleteActorProcedure = "/internalpb.PeersService/DeleteActor"
	// PeersServicePutJobKeysProcedure is the fully-qualified name of the PeersService's PutJobKeys RPC.
	PeersServicePutJobKeysProcedure = "/internalpb.PeersService/PutJobKeys"
	// PeersServiceDeleteJobKeyProcedure is the fully-qualified name of the PeersService's DeleteJobKey
	// RPC.
	PeersServiceDeleteJobKeyProcedure = "/internalpb.PeersService/DeleteJobKey"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	peersServiceServiceDescriptor               = internalpb.File_internal_peers_proto.Services().ByName("PeersService")
	peersServicePutPeerStateMethodDescriptor    = peersServiceServiceDescriptor.Methods().ByName("PutPeerState")
	peersServiceDeletePeerStateMethodDescriptor = peersServiceServiceDescriptor.Methods().ByName("DeletePeerState")
	peersServiceDeleteActorMethodDescriptor     = peersServiceServiceDescriptor.Methods().ByName("DeleteActor")
	peersServicePutJobKeysMethodDescriptor      = peersServiceServiceDescriptor.Methods().ByName("PutJobKeys")
	peersServiceDeleteJobKeyMethodDescriptor    = peersServiceServiceDescriptor.Methods().ByName("DeleteJobKey")
)

// PeersServiceClient is a client for the internalpb.PeersService service.
type PeersServiceClient interface {
	// PutPeerState pushes the given peer state the remote peer to keep.
	// The remote upon receiving the request will persist the peer state into its peers cache
	PutPeerState(context.Context, *connect.Request[internalpb.PutPeerStateRequest]) (*connect.Response[internalpb.PutPeerStateResponse], error)
	// DeletePeerState is sent to remote peers to remove from their peers cache the given
	// peer state. Only the leader of the cluster sends such request to the rest of the cluster
	DeletePeerState(context.Context, *connect.Request[internalpb.DeletePeerStateRequest]) (*connect.Response[internalpb.DeletePeerStateResponse], error)
	// DeleteActor deletes a given actor for a given peer from the cluster.
	// Whenever an actor is stopped the node owning it will remove it from its list and inform the rest of the cluster
	// via this api to remove the given actor from their peers cache
	DeleteActor(context.Context, *connect.Request[internalpb.DeleteActorRequest]) (*connect.Response[internalpb.DeleteActorResponse], error)
	// PutJobKeys sets a job keys for a given peer in the cluster
	// Each peer in the cluster has a local copy of the mapping between peer and their job keys
	PutJobKeys(context.Context, *connect.Request[internalpb.PutJobKeysRequest]) (*connect.Response[internalpb.PutJobKeysResponse], error)
	// DeleteJobKey removes a given job key for a given peer from the cluster.
	// Each peer will remove the given job key for the corresponding peer from their local cache
	DeleteJobKey(context.Context, *connect.Request[internalpb.DeleteJobKeyRequest]) (*connect.Response[internalpb.DeleteJobKeyResponse], error)
}

// NewPeersServiceClient constructs a client for the internalpb.PeersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPeersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PeersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &peersServiceClient{
		putPeerState: connect.NewClient[internalpb.PutPeerStateRequest, internalpb.PutPeerStateResponse](
			httpClient,
			baseURL+PeersServicePutPeerStateProcedure,
			connect.WithSchema(peersServicePutPeerStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePeerState: connect.NewClient[internalpb.DeletePeerStateRequest, internalpb.DeletePeerStateResponse](
			httpClient,
			baseURL+PeersServiceDeletePeerStateProcedure,
			connect.WithSchema(peersServiceDeletePeerStateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteActor: connect.NewClient[internalpb.DeleteActorRequest, internalpb.DeleteActorResponse](
			httpClient,
			baseURL+PeersServiceDeleteActorProcedure,
			connect.WithSchema(peersServiceDeleteActorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		putJobKeys: connect.NewClient[internalpb.PutJobKeysRequest, internalpb.PutJobKeysResponse](
			httpClient,
			baseURL+PeersServicePutJobKeysProcedure,
			connect.WithSchema(peersServicePutJobKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteJobKey: connect.NewClient[internalpb.DeleteJobKeyRequest, internalpb.DeleteJobKeyResponse](
			httpClient,
			baseURL+PeersServiceDeleteJobKeyProcedure,
			connect.WithSchema(peersServiceDeleteJobKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// peersServiceClient implements PeersServiceClient.
type peersServiceClient struct {
	putPeerState    *connect.Client[internalpb.PutPeerStateRequest, internalpb.PutPeerStateResponse]
	deletePeerState *connect.Client[internalpb.DeletePeerStateRequest, internalpb.DeletePeerStateResponse]
	deleteActor     *connect.Client[internalpb.DeleteActorRequest, internalpb.DeleteActorResponse]
	putJobKeys      *connect.Client[internalpb.PutJobKeysRequest, internalpb.PutJobKeysResponse]
	deleteJobKey    *connect.Client[internalpb.DeleteJobKeyRequest, internalpb.DeleteJobKeyResponse]
}

// PutPeerState calls internalpb.PeersService.PutPeerState.
func (c *peersServiceClient) PutPeerState(ctx context.Context, req *connect.Request[internalpb.PutPeerStateRequest]) (*connect.Response[internalpb.PutPeerStateResponse], error) {
	return c.putPeerState.CallUnary(ctx, req)
}

// DeletePeerState calls internalpb.PeersService.DeletePeerState.
func (c *peersServiceClient) DeletePeerState(ctx context.Context, req *connect.Request[internalpb.DeletePeerStateRequest]) (*connect.Response[internalpb.DeletePeerStateResponse], error) {
	return c.deletePeerState.CallUnary(ctx, req)
}

// DeleteActor calls internalpb.PeersService.DeleteActor.
func (c *peersServiceClient) DeleteActor(ctx context.Context, req *connect.Request[internalpb.DeleteActorRequest]) (*connect.Response[internalpb.DeleteActorResponse], error) {
	return c.deleteActor.CallUnary(ctx, req)
}

// PutJobKeys calls internalpb.PeersService.PutJobKeys.
func (c *peersServiceClient) PutJobKeys(ctx context.Context, req *connect.Request[internalpb.PutJobKeysRequest]) (*connect.Response[internalpb.PutJobKeysResponse], error) {
	return c.putJobKeys.CallUnary(ctx, req)
}

// DeleteJobKey calls internalpb.PeersService.DeleteJobKey.
func (c *peersServiceClient) DeleteJobKey(ctx context.Context, req *connect.Request[internalpb.DeleteJobKeyRequest]) (*connect.Response[internalpb.DeleteJobKeyResponse], error) {
	return c.deleteJobKey.CallUnary(ctx, req)
}

// PeersServiceHandler is an implementation of the internalpb.PeersService service.
type PeersServiceHandler interface {
	// PutPeerState pushes the given peer state the remote peer to keep.
	// The remote upon receiving the request will persist the peer state into its peers cache
	PutPeerState(context.Context, *connect.Request[internalpb.PutPeerStateRequest]) (*connect.Response[internalpb.PutPeerStateResponse], error)
	// DeletePeerState is sent to remote peers to remove from their peers cache the given
	// peer state. Only the leader of the cluster sends such request to the rest of the cluster
	DeletePeerState(context.Context, *connect.Request[internalpb.DeletePeerStateRequest]) (*connect.Response[internalpb.DeletePeerStateResponse], error)
	// DeleteActor deletes a given actor for a given peer from the cluster.
	// Whenever an actor is stopped the node owning it will remove it from its list and inform the rest of the cluster
	// via this api to remove the given actor from their peers cache
	DeleteActor(context.Context, *connect.Request[internalpb.DeleteActorRequest]) (*connect.Response[internalpb.DeleteActorResponse], error)
	// PutJobKeys sets a job keys for a given peer in the cluster
	// Each peer in the cluster has a local copy of the mapping between peer and their job keys
	PutJobKeys(context.Context, *connect.Request[internalpb.PutJobKeysRequest]) (*connect.Response[internalpb.PutJobKeysResponse], error)
	// DeleteJobKey removes a given job key for a given peer from the cluster.
	// Each peer will remove the given job key for the corresponding peer from their local cache
	DeleteJobKey(context.Context, *connect.Request[internalpb.DeleteJobKeyRequest]) (*connect.Response[internalpb.DeleteJobKeyResponse], error)
}

// NewPeersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPeersServiceHandler(svc PeersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	peersServicePutPeerStateHandler := connect.NewUnaryHandler(
		PeersServicePutPeerStateProcedure,
		svc.PutPeerState,
		connect.WithSchema(peersServicePutPeerStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	peersServiceDeletePeerStateHandler := connect.NewUnaryHandler(
		PeersServiceDeletePeerStateProcedure,
		svc.DeletePeerState,
		connect.WithSchema(peersServiceDeletePeerStateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	peersServiceDeleteActorHandler := connect.NewUnaryHandler(
		PeersServiceDeleteActorProcedure,
		svc.DeleteActor,
		connect.WithSchema(peersServiceDeleteActorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	peersServicePutJobKeysHandler := connect.NewUnaryHandler(
		PeersServicePutJobKeysProcedure,
		svc.PutJobKeys,
		connect.WithSchema(peersServicePutJobKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	peersServiceDeleteJobKeyHandler := connect.NewUnaryHandler(
		PeersServiceDeleteJobKeyProcedure,
		svc.DeleteJobKey,
		connect.WithSchema(peersServiceDeleteJobKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/internalpb.PeersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PeersServicePutPeerStateProcedure:
			peersServicePutPeerStateHandler.ServeHTTP(w, r)
		case PeersServiceDeletePeerStateProcedure:
			peersServiceDeletePeerStateHandler.ServeHTTP(w, r)
		case PeersServiceDeleteActorProcedure:
			peersServiceDeleteActorHandler.ServeHTTP(w, r)
		case PeersServicePutJobKeysProcedure:
			peersServicePutJobKeysHandler.ServeHTTP(w, r)
		case PeersServiceDeleteJobKeyProcedure:
			peersServiceDeleteJobKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPeersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPeersServiceHandler struct{}

func (UnimplementedPeersServiceHandler) PutPeerState(context.Context, *connect.Request[internalpb.PutPeerStateRequest]) (*connect.Response[internalpb.PutPeerStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.PutPeerState is not implemented"))
}

func (UnimplementedPeersServiceHandler) DeletePeerState(context.Context, *connect.Request[internalpb.DeletePeerStateRequest]) (*connect.Response[internalpb.DeletePeerStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.DeletePeerState is not implemented"))
}

func (UnimplementedPeersServiceHandler) DeleteActor(context.Context, *connect.Request[internalpb.DeleteActorRequest]) (*connect.Response[internalpb.DeleteActorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.DeleteActor is not implemented"))
}

func (UnimplementedPeersServiceHandler) PutJobKeys(context.Context, *connect.Request[internalpb.PutJobKeysRequest]) (*connect.Response[internalpb.PutJobKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.PutJobKeys is not implemented"))
}

func (UnimplementedPeersServiceHandler) DeleteJobKey(context.Context, *connect.Request[internalpb.DeleteJobKeyRequest]) (*connect.Response[internalpb.DeleteJobKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalpb.PeersService.DeleteJobKey is not implemented"))
}
