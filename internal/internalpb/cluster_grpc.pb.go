// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/cluster.proto

package internalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterService_GetNodeMetric_FullMethodName = "/internalpb.ClusterService/GetNodeMetric"
	ClusterService_GetKinds_FullMethodName      = "/internalpb.ClusterService/GetKinds"
)

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ClusterService is used to interact with the cluster internal
type ClusterServiceClient interface {
	// GetNodeMetric returns the node metric
	GetNodeMetric(ctx context.Context, in *GetNodeMetricRequest, opts ...grpc.CallOption) (*GetNodeMetricResponse, error)
	// GetKinds returns the list of cluster kinds
	GetKinds(ctx context.Context, in *GetKindsRequest, opts ...grpc.CallOption) (*GetKindsResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) GetNodeMetric(ctx context.Context, in *GetNodeMetricRequest, opts ...grpc.CallOption) (*GetNodeMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeMetricResponse)
	err := c.cc.Invoke(ctx, ClusterService_GetNodeMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetKinds(ctx context.Context, in *GetKindsRequest, opts ...grpc.CallOption) (*GetKindsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKindsResponse)
	err := c.cc.Invoke(ctx, ClusterService_GetKinds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations should embed UnimplementedClusterServiceServer
// for forward compatibility.
//
// ClusterService is used to interact with the cluster internal
type ClusterServiceServer interface {
	// GetNodeMetric returns the node metric
	GetNodeMetric(context.Context, *GetNodeMetricRequest) (*GetNodeMetricResponse, error)
	// GetKinds returns the list of cluster kinds
	GetKinds(context.Context, *GetKindsRequest) (*GetKindsResponse, error)
}

// UnimplementedClusterServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterServiceServer struct{}

func (UnimplementedClusterServiceServer) GetNodeMetric(context.Context, *GetNodeMetricRequest) (*GetNodeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetric not implemented")
}
func (UnimplementedClusterServiceServer) GetKinds(context.Context, *GetKindsRequest) (*GetKindsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKinds not implemented")
}
func (UnimplementedClusterServiceServer) testEmbeddedByValue() {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_GetNodeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetNodeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_GetNodeMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetNodeMetric(ctx, req.(*GetNodeMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_GetKinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetKinds(ctx, req.(*GetKindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalpb.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeMetric",
			Handler:    _ClusterService_GetNodeMetric_Handler,
		},
		{
			MethodName: "GetKinds",
			Handler:    _ClusterService_GetKinds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/cluster.proto",
}
