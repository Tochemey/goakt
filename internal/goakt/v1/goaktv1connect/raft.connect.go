// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: goakt/v1/raft.proto

package goaktv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tochemey/goakt/internal/goakt/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ActorsMetaServiceName is the fully-qualified name of the ActorsMetaService service.
	ActorsMetaServiceName = "goakt.v1.ActorsMetaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActorsMetaServicePutActorProcedure is the fully-qualified name of the ActorsMetaService's
	// PutActor RPC.
	ActorsMetaServicePutActorProcedure = "/goakt.v1.ActorsMetaService/PutActor"
	// ActorsMetaServiceGetActorProcedure is the fully-qualified name of the ActorsMetaService's
	// GetActor RPC.
	ActorsMetaServiceGetActorProcedure = "/goakt.v1.ActorsMetaService/GetActor"
)

// ActorsMetaServiceClient is a client for the goakt.v1.ActorsMetaService service.
type ActorsMetaServiceClient interface {
	// PutActor persists an actor into the distributed storge
	PutActor(context.Context, *connect_go.Request[v1.PutActorRequest]) (*connect_go.Response[v1.PutActorResponse], error)
	// GetActor reads the content of a given actor
	GetActor(context.Context, *connect_go.Request[v1.GetActorRequest]) (*connect_go.Response[v1.GetActorResponse], error)
}

// NewActorsMetaServiceClient constructs a client for the goakt.v1.ActorsMetaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActorsMetaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ActorsMetaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &actorsMetaServiceClient{
		putActor: connect_go.NewClient[v1.PutActorRequest, v1.PutActorResponse](
			httpClient,
			baseURL+ActorsMetaServicePutActorProcedure,
			opts...,
		),
		getActor: connect_go.NewClient[v1.GetActorRequest, v1.GetActorResponse](
			httpClient,
			baseURL+ActorsMetaServiceGetActorProcedure,
			opts...,
		),
	}
}

// actorsMetaServiceClient implements ActorsMetaServiceClient.
type actorsMetaServiceClient struct {
	putActor *connect_go.Client[v1.PutActorRequest, v1.PutActorResponse]
	getActor *connect_go.Client[v1.GetActorRequest, v1.GetActorResponse]
}

// PutActor calls goakt.v1.ActorsMetaService.PutActor.
func (c *actorsMetaServiceClient) PutActor(ctx context.Context, req *connect_go.Request[v1.PutActorRequest]) (*connect_go.Response[v1.PutActorResponse], error) {
	return c.putActor.CallUnary(ctx, req)
}

// GetActor calls goakt.v1.ActorsMetaService.GetActor.
func (c *actorsMetaServiceClient) GetActor(ctx context.Context, req *connect_go.Request[v1.GetActorRequest]) (*connect_go.Response[v1.GetActorResponse], error) {
	return c.getActor.CallUnary(ctx, req)
}

// ActorsMetaServiceHandler is an implementation of the goakt.v1.ActorsMetaService service.
type ActorsMetaServiceHandler interface {
	// PutActor persists an actor into the distributed storge
	PutActor(context.Context, *connect_go.Request[v1.PutActorRequest]) (*connect_go.Response[v1.PutActorResponse], error)
	// GetActor reads the content of a given actor
	GetActor(context.Context, *connect_go.Request[v1.GetActorRequest]) (*connect_go.Response[v1.GetActorResponse], error)
}

// NewActorsMetaServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActorsMetaServiceHandler(svc ActorsMetaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ActorsMetaServicePutActorProcedure, connect_go.NewUnaryHandler(
		ActorsMetaServicePutActorProcedure,
		svc.PutActor,
		opts...,
	))
	mux.Handle(ActorsMetaServiceGetActorProcedure, connect_go.NewUnaryHandler(
		ActorsMetaServiceGetActorProcedure,
		svc.GetActor,
		opts...,
	))
	return "/goakt.v1.ActorsMetaService/", mux
}

// UnimplementedActorsMetaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActorsMetaServiceHandler struct{}

func (UnimplementedActorsMetaServiceHandler) PutActor(context.Context, *connect_go.Request[v1.PutActorRequest]) (*connect_go.Response[v1.PutActorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goakt.v1.ActorsMetaService.PutActor is not implemented"))
}

func (UnimplementedActorsMetaServiceHandler) GetActor(context.Context, *connect_go.Request[v1.GetActorRequest]) (*connect_go.Response[v1.GetActorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("goakt.v1.ActorsMetaService.GetActor is not implemented"))
}
