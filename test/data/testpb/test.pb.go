// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: test/test.proto

// Test protocol buffers used by the goakt test suite.
// These messages drive actor behaviors, assertions, and cluster scenarios.
// They are not intended for production APIs.

package testpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TestReply is a simple acknowledgement payload with no fields.
type TestReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestReply) Reset() {
	*x = TestReply{}
	mi := &file_test_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReply) ProtoMessage() {}

func (x *TestReply) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReply.ProtoReflect.Descriptor instead.
func (*TestReply) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{0}
}

// TestPanic instructs an actor to panic; used to test supervision strategies.
type TestPanic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPanic) Reset() {
	*x = TestPanic{}
	mi := &file_test_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPanic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPanic) ProtoMessage() {}

func (x *TestPanic) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPanic.ProtoReflect.Descriptor instead.
func (*TestPanic) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{1}
}

// TestPanicError instructs an actor to panic with an error value.
type TestPanicError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPanicError) Reset() {
	*x = TestPanicError{}
	mi := &file_test_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPanicError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPanicError) ProtoMessage() {}

func (x *TestPanicError) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPanicError.ProtoReflect.Descriptor instead.
func (*TestPanicError) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{2}
}

// TestTimeout is used to simulate a request that will time out (no response).
type TestTimeout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestTimeout) Reset() {
	*x = TestTimeout{}
	mi := &file_test_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTimeout) ProtoMessage() {}

func (x *TestTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTimeout.ProtoReflect.Descriptor instead.
func (*TestTimeout) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{3}
}

// Reply carries a small text response used in request/response tests.
type Reply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// content is the plain\-text payload of the reply.
	Content       string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_test_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{4}
}

func (x *Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// TestSend triggers a local send scenario in tests.
type TestSend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSend) Reset() {
	*x = TestSend{}
	mi := &file_test_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSend) ProtoMessage() {}

func (x *TestSend) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSend.ProtoReflect.Descriptor instead.
func (*TestSend) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{5}
}

// TestRemoteSend triggers a remote send scenario (inter\-node) in tests.
type TestRemoteSend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRemoteSend) Reset() {
	*x = TestRemoteSend{}
	mi := &file_test_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRemoteSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRemoteSend) ProtoMessage() {}

func (x *TestRemoteSend) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRemoteSend.ProtoReflect.Descriptor instead.
func (*TestRemoteSend) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{6}
}

// Account represents a snapshot of an account aggregate used in tests.
type Account struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id is the unique identifier of the account.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// account_balance is the current balance of the account.
	AccountBalance float64 `protobuf:"fixed64,2,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_test_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{7}
}

func (x *Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Account) GetAccountBalance() float64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

// CreateAccount is a command to create a new test account.
type CreateAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_balance is the initial balance of the account.
	AccountBalance float64 `protobuf:"fixed64,2,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateAccount) Reset() {
	*x = CreateAccount{}
	mi := &file_test_test_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccount) ProtoMessage() {}

func (x *CreateAccount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccount.ProtoReflect.Descriptor instead.
func (*CreateAccount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAccount) GetAccountBalance() float64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

// CreditAccount is a command to credit an existing account.
type CreditAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id identifies the target account.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// balance is the amount to add to the account.
	Balance       float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreditAccount) Reset() {
	*x = CreditAccount{}
	mi := &file_test_test_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreditAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditAccount) ProtoMessage() {}

func (x *CreditAccount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditAccount.ProtoReflect.Descriptor instead.
func (*CreditAccount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{9}
}

func (x *CreditAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreditAccount) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// AccountCreated is an event emitted after an account is created.
type AccountCreated struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id is the identifier of the created account.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// account_balance is the starting balance.
	AccountBalance float64 `protobuf:"fixed64,2,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AccountCreated) Reset() {
	*x = AccountCreated{}
	mi := &file_test_test_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreated) ProtoMessage() {}

func (x *AccountCreated) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreated.ProtoReflect.Descriptor instead.
func (*AccountCreated) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{10}
}

func (x *AccountCreated) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountCreated) GetAccountBalance() float64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

// AccountCredited is an event emitted after a successful credit.
type AccountCredited struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id is the identifier of the credited account.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// account_balance is the resulting account balance after credit.
	AccountBalance float64 `protobuf:"fixed64,2,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AccountCredited) Reset() {
	*x = AccountCredited{}
	mi := &file_test_test_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountCredited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCredited) ProtoMessage() {}

func (x *AccountCredited) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCredited.ProtoReflect.Descriptor instead.
func (*AccountCredited) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{11}
}

func (x *AccountCredited) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountCredited) GetAccountBalance() float64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

// DebitAccount is a command used in tests to exercise debit flows.
type DebitAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebitAccount) Reset() {
	*x = DebitAccount{}
	mi := &file_test_test_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebitAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebitAccount) ProtoMessage() {}

func (x *DebitAccount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebitAccount.ProtoReflect.Descriptor instead.
func (*DebitAccount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{12}
}

// AccountDebited is an event emitted after a successful debit in tests.
type AccountDebited struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountDebited) Reset() {
	*x = AccountDebited{}
	mi := &file_test_test_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountDebited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDebited) ProtoMessage() {}

func (x *AccountDebited) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDebited.ProtoReflect.Descriptor instead.
func (*AccountDebited) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{13}
}

// GetAccount is a query to fetch the current state of an account.
type GetAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// account_id identifies the account to retrieve.
	AccountId     string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccount) Reset() {
	*x = GetAccount{}
	mi := &file_test_test_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccount) ProtoMessage() {}

func (x *GetAccount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccount.ProtoReflect.Descriptor instead.
func (*GetAccount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{14}
}

func (x *GetAccount) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// TestLogin requests a login flow in tests.
type TestLogin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestLogin) Reset() {
	*x = TestLogin{}
	mi := &file_test_test_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestLogin) ProtoMessage() {}

func (x *TestLogin) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestLogin.ProtoReflect.Descriptor instead.
func (*TestLogin) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{15}
}

// TestLoginSuccess indicates a successful login in tests.
type TestLoginSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestLoginSuccess) Reset() {
	*x = TestLoginSuccess{}
	mi := &file_test_test_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestLoginSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestLoginSuccess) ProtoMessage() {}

func (x *TestLoginSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestLoginSuccess.ProtoReflect.Descriptor instead.
func (*TestLoginSuccess) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{16}
}

// TestReadiness asks an actor to report readiness.
type TestReadiness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestReadiness) Reset() {
	*x = TestReadiness{}
	mi := &file_test_test_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReadiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReadiness) ProtoMessage() {}

func (x *TestReadiness) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReadiness.ProtoReflect.Descriptor instead.
func (*TestReadiness) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{17}
}

// TestReady indicates an actor has reached a ready state.
type TestReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestReady) Reset() {
	*x = TestReady{}
	mi := &file_test_test_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReady) ProtoMessage() {}

func (x *TestReady) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReady.ProtoReflect.Descriptor instead.
func (*TestReady) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{18}
}

// TestBye is a termination/cleanup signal used in tests.
type TestBye struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestBye) Reset() {
	*x = TestBye{}
	mi := &file_test_test_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestBye) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestBye) ProtoMessage() {}

func (x *TestBye) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestBye.ProtoReflect.Descriptor instead.
func (*TestBye) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{19}
}

// TestStash asks the actor to stash the current message.
type TestStash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestStash) Reset() {
	*x = TestStash{}
	mi := &file_test_test_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStash) ProtoMessage() {}

func (x *TestStash) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStash.ProtoReflect.Descriptor instead.
func (*TestStash) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{20}
}

// TestUnstash asks the actor to unstash a single message.
type TestUnstash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestUnstash) Reset() {
	*x = TestUnstash{}
	mi := &file_test_test_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestUnstash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUnstash) ProtoMessage() {}

func (x *TestUnstash) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUnstash.ProtoReflect.Descriptor instead.
func (*TestUnstash) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{21}
}

// TestUnstashAll asks the actor to unstash all stashed messages.
type TestUnstashAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestUnstashAll) Reset() {
	*x = TestUnstashAll{}
	mi := &file_test_test_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestUnstashAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUnstashAll) ProtoMessage() {}

func (x *TestUnstashAll) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUnstashAll.ProtoReflect.Descriptor instead.
func (*TestUnstashAll) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{22}
}

// TestPing is a heartbeat request in tests.
type TestPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPing) Reset() {
	*x = TestPing{}
	mi := &file_test_test_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPing) ProtoMessage() {}

func (x *TestPing) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPing.ProtoReflect.Descriptor instead.
func (*TestPing) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{23}
}

// TestPong is the heartbeat response in tests.
type TestPong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestPong) Reset() {
	*x = TestPong{}
	mi := &file_test_test_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPong) ProtoMessage() {}

func (x *TestPong) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPong.ProtoReflect.Descriptor instead.
func (*TestPong) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{24}
}

// TestWait instructs an actor to wait before responding; used to test timeouts.
type TestWait struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// duration is the delay before responding (test\-defined time unit).
	Duration      uint64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWait) Reset() {
	*x = TestWait{}
	mi := &file_test_test_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWait) ProtoMessage() {}

func (x *TestWait) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWait.ProtoReflect.Descriptor instead.
func (*TestWait) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{25}
}

func (x *TestWait) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// TestRunTask asks an actor to run a background task and complete later.
type TestRunTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// duration is the simulated task runtime (test\-defined time unit).
	Duration      uint64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRunTask) Reset() {
	*x = TestRunTask{}
	mi := &file_test_test_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRunTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRunTask) ProtoMessage() {}

func (x *TestRunTask) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRunTask.ProtoReflect.Descriptor instead.
func (*TestRunTask) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{26}
}

func (x *TestRunTask) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// TaskComplete notifies that a previously started task has finished.
type TaskComplete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskComplete) Reset() {
	*x = TaskComplete{}
	mi := &file_test_test_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskComplete) ProtoMessage() {}

func (x *TaskComplete) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskComplete.ProtoReflect.Descriptor instead.
func (*TaskComplete) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{27}
}

// TestLog asks an actor to log a line of text (useful for tracing tests).
type TestLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// text is the message to be logged.
	Text          string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestLog) Reset() {
	*x = TestLog{}
	mi := &file_test_test_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestLog) ProtoMessage() {}

func (x *TestLog) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestLog.ProtoReflect.Descriptor instead.
func (*TestLog) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{28}
}

func (x *TestLog) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// TestGetCount queries an actor for its current counter value.
type TestGetCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestGetCount) Reset() {
	*x = TestGetCount{}
	mi := &file_test_test_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestGetCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestGetCount) ProtoMessage() {}

func (x *TestGetCount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestGetCount.ProtoReflect.Descriptor instead.
func (*TestGetCount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{29}
}

// TestCount carries the counter value returned by an actor.
type TestCount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// value is the current counter value.
	Value         int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCount) Reset() {
	*x = TestCount{}
	mi := &file_test_test_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCount) ProtoMessage() {}

func (x *TestCount) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCount.ProtoReflect.Descriptor instead.
func (*TestCount) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{30}
}

func (x *TestCount) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// TestRemoteForward signals the actor to forward a message across nodes.
type TestRemoteForward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRemoteForward) Reset() {
	*x = TestRemoteForward{}
	mi := &file_test_test_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRemoteForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRemoteForward) ProtoMessage() {}

func (x *TestRemoteForward) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRemoteForward.ProtoReflect.Descriptor instead.
func (*TestRemoteForward) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{31}
}

// TestClusterForward signals the actor to forward via a cluster\-aware route.
type TestClusterForward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestClusterForward) Reset() {
	*x = TestClusterForward{}
	mi := &file_test_test_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestClusterForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestClusterForward) ProtoMessage() {}

func (x *TestClusterForward) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestClusterForward.ProtoReflect.Descriptor instead.
func (*TestClusterForward) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{32}
}

// TestMessage wraps an arbitrary payload with an optional priority hint.
type TestMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message is an arbitrary payload packed as google.protobuf.Any.
	// The embedded type_url and value should be set by the sender.
	Message *anypb.Any `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// priority is an optional delivery/processing hint used in tests.
	// Higher values typically indicate higher precedence; 0 means default.
	Priority      int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_test_test_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{33}
}

func (x *TestMessage) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TestMessage) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

var File_test_test_proto protoreflect.FileDescriptor

const file_test_test_proto_rawDesc = "" +
	"\n" +
	"\x0ftest/test.proto\x12\x06testpb\x1a\x19google/protobuf/any.proto\"\v\n" +
	"\tTestReply\"\v\n" +
	"\tTestPanic\"\x10\n" +
	"\x0eTestPanicError\"\r\n" +
	"\vTestTimeout\"!\n" +
	"\x05Reply\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\"\n" +
	"\n" +
	"\bTestSend\"\x10\n" +
	"\x0eTestRemoteSend\"Q\n" +
	"\aAccount\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12'\n" +
	"\x0faccount_balance\x18\x02 \x01(\x01R\x0eaccountBalance\"8\n" +
	"\rCreateAccount\x12'\n" +
	"\x0faccount_balance\x18\x02 \x01(\x01R\x0eaccountBalance\"H\n" +
	"\rCreditAccount\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12\x18\n" +
	"\abalance\x18\x02 \x01(\x01R\abalance\"X\n" +
	"\x0eAccountCreated\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12'\n" +
	"\x0faccount_balance\x18\x02 \x01(\x01R\x0eaccountBalance\"Y\n" +
	"\x0fAccountCredited\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\x12'\n" +
	"\x0faccount_balance\x18\x02 \x01(\x01R\x0eaccountBalance\"\x0e\n" +
	"\fDebitAccount\"\x10\n" +
	"\x0eAccountDebited\"+\n" +
	"\n" +
	"GetAccount\x12\x1d\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tR\taccountId\"\v\n" +
	"\tTestLogin\"\x12\n" +
	"\x10TestLoginSuccess\"\x0f\n" +
	"\rTestReadiness\"\v\n" +
	"\tTestReady\"\t\n" +
	"\aTestBye\"\v\n" +
	"\tTestStash\"\r\n" +
	"\vTestUnstash\"\x10\n" +
	"\x0eTestUnstashAll\"\n" +
	"\n" +
	"\bTestPing\"\n" +
	"\n" +
	"\bTestPong\"&\n" +
	"\bTestWait\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x04R\bduration\")\n" +
	"\vTestRunTask\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x04R\bduration\"\x0e\n" +
	"\fTaskComplete\"\x1d\n" +
	"\aTestLog\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\"\x0e\n" +
	"\fTestGetCount\"!\n" +
	"\tTestCount\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\"\x13\n" +
	"\x11TestRemoteForward\"\x14\n" +
	"\x12TestClusterForward\"Y\n" +
	"\vTestMessage\x12.\n" +
	"\amessage\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\amessage\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\x03R\bpriorityB\x80\x01\n" +
	"\n" +
	"com.testpbB\tTestProtoH\x02P\x01Z-github.com/tochemey/goakt/v3/test/data;testpb\xa2\x02\x03TXX\xaa\x02\x06Testpb\xca\x02\x06Testpb\xe2\x02\x12Testpb\\GPBMetadata\xea\x02\x06Testpbb\x06proto3"

var (
	file_test_test_proto_rawDescOnce sync.Once
	file_test_test_proto_rawDescData []byte
)

func file_test_test_proto_rawDescGZIP() []byte {
	file_test_test_proto_rawDescOnce.Do(func() {
		file_test_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_test_test_proto_rawDesc), len(file_test_test_proto_rawDesc)))
	})
	return file_test_test_proto_rawDescData
}

var file_test_test_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_test_test_proto_goTypes = []any{
	(*TestReply)(nil),          // 0: testpb.TestReply
	(*TestPanic)(nil),          // 1: testpb.TestPanic
	(*TestPanicError)(nil),     // 2: testpb.TestPanicError
	(*TestTimeout)(nil),        // 3: testpb.TestTimeout
	(*Reply)(nil),              // 4: testpb.Reply
	(*TestSend)(nil),           // 5: testpb.TestSend
	(*TestRemoteSend)(nil),     // 6: testpb.TestRemoteSend
	(*Account)(nil),            // 7: testpb.Account
	(*CreateAccount)(nil),      // 8: testpb.CreateAccount
	(*CreditAccount)(nil),      // 9: testpb.CreditAccount
	(*AccountCreated)(nil),     // 10: testpb.AccountCreated
	(*AccountCredited)(nil),    // 11: testpb.AccountCredited
	(*DebitAccount)(nil),       // 12: testpb.DebitAccount
	(*AccountDebited)(nil),     // 13: testpb.AccountDebited
	(*GetAccount)(nil),         // 14: testpb.GetAccount
	(*TestLogin)(nil),          // 15: testpb.TestLogin
	(*TestLoginSuccess)(nil),   // 16: testpb.TestLoginSuccess
	(*TestReadiness)(nil),      // 17: testpb.TestReadiness
	(*TestReady)(nil),          // 18: testpb.TestReady
	(*TestBye)(nil),            // 19: testpb.TestBye
	(*TestStash)(nil),          // 20: testpb.TestStash
	(*TestUnstash)(nil),        // 21: testpb.TestUnstash
	(*TestUnstashAll)(nil),     // 22: testpb.TestUnstashAll
	(*TestPing)(nil),           // 23: testpb.TestPing
	(*TestPong)(nil),           // 24: testpb.TestPong
	(*TestWait)(nil),           // 25: testpb.TestWait
	(*TestRunTask)(nil),        // 26: testpb.TestRunTask
	(*TaskComplete)(nil),       // 27: testpb.TaskComplete
	(*TestLog)(nil),            // 28: testpb.TestLog
	(*TestGetCount)(nil),       // 29: testpb.TestGetCount
	(*TestCount)(nil),          // 30: testpb.TestCount
	(*TestRemoteForward)(nil),  // 31: testpb.TestRemoteForward
	(*TestClusterForward)(nil), // 32: testpb.TestClusterForward
	(*TestMessage)(nil),        // 33: testpb.TestMessage
	(*anypb.Any)(nil),          // 34: google.protobuf.Any
}
var file_test_test_proto_depIdxs = []int32{
	34, // 0: testpb.TestMessage.message:type_name -> google.protobuf.Any
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_test_test_proto_init() }
func file_test_test_proto_init() {
	if File_test_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_test_proto_rawDesc), len(file_test_test_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_test_proto_goTypes,
		DependencyIndexes: file_test_test_proto_depIdxs,
		MessageInfos:      file_test_test_proto_msgTypes,
	}.Build()
	File_test_test_proto = out.File
	file_test_test_proto_goTypes = nil
	file_test_test_proto_depIdxs = nil
}
