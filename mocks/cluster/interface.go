// Code generated by mockery. DO NOT EDIT.

package cluster

import (
	context "context"

	internalcluster "github.com/tochemey/goakt/v3/internal/cluster"
	internalpb "github.com/tochemey/goakt/v3/internal/internalpb"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// ActorExists provides a mock function with given fields: ctx, actorName
func (_m *Interface) ActorExists(ctx context.Context, actorName string) (bool, error) {
	ret := _m.Called(ctx, actorName)

	if len(ret) == 0 {
		panic("no return value specified for ActorExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, actorName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, actorName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_ActorExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActorExists'
type Interface_ActorExists_Call struct {
	*mock.Call
}

// ActorExists is a helper method to define mock.On call
//   - ctx context.Context
//   - actorName string
func (_e *Interface_Expecter) ActorExists(ctx interface{}, actorName interface{}) *Interface_ActorExists_Call {
	return &Interface_ActorExists_Call{Call: _e.mock.On("ActorExists", ctx, actorName)}
}

func (_c *Interface_ActorExists_Call) Run(run func(ctx context.Context, actorName string)) *Interface_ActorExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_ActorExists_Call) Return(_a0 bool, _a1 error) *Interface_ActorExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_ActorExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Interface_ActorExists_Call {
	_c.Call.Return(run)
	return _c
}

// Actors provides a mock function with given fields: ctx, timeout
func (_m *Interface) Actors(ctx context.Context, timeout time.Duration) ([]*internalpb.Actor, error) {
	ret := _m.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Actors")
	}

	var r0 []*internalpb.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) ([]*internalpb.Actor, error)); ok {
		return rf(ctx, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) []*internalpb.Actor); ok {
		r0 = rf(ctx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalpb.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_Actors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Actors'
type Interface_Actors_Call struct {
	*mock.Call
}

// Actors is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *Interface_Expecter) Actors(ctx interface{}, timeout interface{}) *Interface_Actors_Call {
	return &Interface_Actors_Call{Call: _e.mock.On("Actors", ctx, timeout)}
}

func (_c *Interface_Actors_Call) Run(run func(ctx context.Context, timeout time.Duration)) *Interface_Actors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Interface_Actors_Call) Return(_a0 []*internalpb.Actor, _a1 error) *Interface_Actors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_Actors_Call) RunAndReturn(run func(context.Context, time.Duration) ([]*internalpb.Actor, error)) *Interface_Actors_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with no fields
func (_m *Interface) Events() <-chan *internalcluster.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan *internalcluster.Event
	if rf, ok := ret.Get(0).(func() <-chan *internalcluster.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *internalcluster.Event)
		}
	}

	return r0
}

// Interface_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type Interface_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *Interface_Expecter) Events() *Interface_Events_Call {
	return &Interface_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *Interface_Events_Call) Run(run func()) *Interface_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_Events_Call) Return(_a0 <-chan *internalcluster.Event) *Interface_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Events_Call) RunAndReturn(run func() <-chan *internalcluster.Event) *Interface_Events_Call {
	_c.Call.Return(run)
	return _c
}

// GetActor provides a mock function with given fields: ctx, actorName
func (_m *Interface) GetActor(ctx context.Context, actorName string) (*internalpb.Actor, error) {
	ret := _m.Called(ctx, actorName)

	if len(ret) == 0 {
		panic("no return value specified for GetActor")
	}

	var r0 *internalpb.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalpb.Actor, error)); ok {
		return rf(ctx, actorName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalpb.Actor); ok {
		r0 = rf(ctx, actorName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, actorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_GetActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActor'
type Interface_GetActor_Call struct {
	*mock.Call
}

// GetActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actorName string
func (_e *Interface_Expecter) GetActor(ctx interface{}, actorName interface{}) *Interface_GetActor_Call {
	return &Interface_GetActor_Call{Call: _e.mock.On("GetActor", ctx, actorName)}
}

func (_c *Interface_GetActor_Call) Run(run func(ctx context.Context, actorName string)) *Interface_GetActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_GetActor_Call) Return(_a0 *internalpb.Actor, _a1 error) *Interface_GetActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_GetActor_Call) RunAndReturn(run func(context.Context, string) (*internalpb.Actor, error)) *Interface_GetActor_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrain provides a mock function with given fields: ctx, grainID
func (_m *Interface) GetGrain(ctx context.Context, grainID string) (*internalpb.Grain, error) {
	ret := _m.Called(ctx, grainID)

	if len(ret) == 0 {
		panic("no return value specified for GetGrain")
	}

	var r0 *internalpb.Grain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalpb.Grain, error)); ok {
		return rf(ctx, grainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalpb.Grain); ok {
		r0 = rf(ctx, grainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.Grain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, grainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_GetGrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrain'
type Interface_GetGrain_Call struct {
	*mock.Call
}

// GetGrain is a helper method to define mock.On call
//   - ctx context.Context
//   - grainID string
func (_e *Interface_Expecter) GetGrain(ctx interface{}, grainID interface{}) *Interface_GetGrain_Call {
	return &Interface_GetGrain_Call{Call: _e.mock.On("GetGrain", ctx, grainID)}
}

func (_c *Interface_GetGrain_Call) Run(run func(ctx context.Context, grainID string)) *Interface_GetGrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_GetGrain_Call) Return(_a0 *internalpb.Grain, _a1 error) *Interface_GetGrain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_GetGrain_Call) RunAndReturn(run func(context.Context, string) (*internalpb.Grain, error)) *Interface_GetGrain_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartition provides a mock function with given fields: actorName
func (_m *Interface) GetPartition(actorName string) int {
	ret := _m.Called(actorName)

	if len(ret) == 0 {
		panic("no return value specified for GetPartition")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(actorName)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Interface_GetPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartition'
type Interface_GetPartition_Call struct {
	*mock.Call
}

// GetPartition is a helper method to define mock.On call
//   - actorName string
func (_e *Interface_Expecter) GetPartition(actorName interface{}) *Interface_GetPartition_Call {
	return &Interface_GetPartition_Call{Call: _e.mock.On("GetPartition", actorName)}
}

func (_c *Interface_GetPartition_Call) Run(run func(actorName string)) *Interface_GetPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Interface_GetPartition_Call) Return(_a0 int) *Interface_GetPartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_GetPartition_Call) RunAndReturn(run func(string) int) *Interface_GetPartition_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: ctx, peerAddress
func (_m *Interface) GetState(ctx context.Context, peerAddress string) (*internalpb.PeerState, error) {
	ret := _m.Called(ctx, peerAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 *internalpb.PeerState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalpb.PeerState, error)); ok {
		return rf(ctx, peerAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalpb.PeerState); ok {
		r0 = rf(ctx, peerAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.PeerState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, peerAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type Interface_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - peerAddress string
func (_e *Interface_Expecter) GetState(ctx interface{}, peerAddress interface{}) *Interface_GetState_Call {
	return &Interface_GetState_Call{Call: _e.mock.On("GetState", ctx, peerAddress)}
}

func (_c *Interface_GetState_Call) Run(run func(ctx context.Context, peerAddress string)) *Interface_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_GetState_Call) Return(_a0 *internalpb.PeerState, _a1 error) *Interface_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_GetState_Call) RunAndReturn(run func(context.Context, string) (*internalpb.PeerState, error)) *Interface_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GrainExists provides a mock function with given fields: ctx, grainID
func (_m *Interface) GrainExists(ctx context.Context, grainID string) (bool, error) {
	ret := _m.Called(ctx, grainID)

	if len(ret) == 0 {
		panic("no return value specified for GrainExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, grainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, grainID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, grainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_GrainExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrainExists'
type Interface_GrainExists_Call struct {
	*mock.Call
}

// GrainExists is a helper method to define mock.On call
//   - ctx context.Context
//   - grainID string
func (_e *Interface_Expecter) GrainExists(ctx interface{}, grainID interface{}) *Interface_GrainExists_Call {
	return &Interface_GrainExists_Call{Call: _e.mock.On("GrainExists", ctx, grainID)}
}

func (_c *Interface_GrainExists_Call) Run(run func(ctx context.Context, grainID string)) *Interface_GrainExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_GrainExists_Call) Return(_a0 bool, _a1 error) *Interface_GrainExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_GrainExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Interface_GrainExists_Call {
	_c.Call.Return(run)
	return _c
}

// Grains provides a mock function with given fields: ctx, timeout
func (_m *Interface) Grains(ctx context.Context, timeout time.Duration) ([]*internalpb.Grain, error) {
	ret := _m.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for Grains")
	}

	var r0 []*internalpb.Grain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) ([]*internalpb.Grain, error)); ok {
		return rf(ctx, timeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) []*internalpb.Grain); ok {
		r0 = rf(ctx, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalpb.Grain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_Grains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Grains'
type Interface_Grains_Call struct {
	*mock.Call
}

// Grains is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *Interface_Expecter) Grains(ctx interface{}, timeout interface{}) *Interface_Grains_Call {
	return &Interface_Grains_Call{Call: _e.mock.On("Grains", ctx, timeout)}
}

func (_c *Interface_Grains_Call) Run(run func(ctx context.Context, timeout time.Duration)) *Interface_Grains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *Interface_Grains_Call) Return(_a0 []*internalpb.Grain, _a1 error) *Interface_Grains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_Grains_Call) RunAndReturn(run func(context.Context, time.Duration) ([]*internalpb.Grain, error)) *Interface_Grains_Call {
	_c.Call.Return(run)
	return _c
}

// IsLeader provides a mock function with given fields: ctx
func (_m *Interface) IsLeader(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interface_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type Interface_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) IsLeader(ctx interface{}) *Interface_IsLeader_Call {
	return &Interface_IsLeader_Call{Call: _e.mock.On("IsLeader", ctx)}
}

func (_c *Interface_IsLeader_Call) Run(run func(ctx context.Context)) *Interface_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_IsLeader_Call) Return(_a0 bool) *Interface_IsLeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_IsLeader_Call) RunAndReturn(run func(context.Context) bool) *Interface_IsLeader_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function with no fields
func (_m *Interface) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Interface_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type Interface_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *Interface_Expecter) IsRunning() *Interface_IsRunning_Call {
	return &Interface_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *Interface_IsRunning_Call) Run(run func()) *Interface_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Interface_IsRunning_Call) Return(_a0 bool) *Interface_IsRunning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_IsRunning_Call) RunAndReturn(run func() bool) *Interface_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// LookupKind provides a mock function with given fields: ctx, kind
func (_m *Interface) LookupKind(ctx context.Context, kind string) (string, error) {
	ret := _m.Called(ctx, kind)

	if len(ret) == 0 {
		panic("no return value specified for LookupKind")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, kind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, kind)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_LookupKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupKind'
type Interface_LookupKind_Call struct {
	*mock.Call
}

// LookupKind is a helper method to define mock.On call
//   - ctx context.Context
//   - kind string
func (_e *Interface_Expecter) LookupKind(ctx interface{}, kind interface{}) *Interface_LookupKind_Call {
	return &Interface_LookupKind_Call{Call: _e.mock.On("LookupKind", ctx, kind)}
}

func (_c *Interface_LookupKind_Call) Run(run func(ctx context.Context, kind string)) *Interface_LookupKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_LookupKind_Call) Return(_a0 string, _a1 error) *Interface_LookupKind_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_LookupKind_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Interface_LookupKind_Call {
	_c.Call.Return(run)
	return _c
}

// Peers provides a mock function with given fields: ctx
func (_m *Interface) Peers(ctx context.Context) ([]*internalcluster.Peer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Peers")
	}

	var r0 []*internalcluster.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*internalcluster.Peer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*internalcluster.Peer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalcluster.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_Peers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peers'
type Interface_Peers_Call struct {
	*mock.Call
}

// Peers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) Peers(ctx interface{}) *Interface_Peers_Call {
	return &Interface_Peers_Call{Call: _e.mock.On("Peers", ctx)}
}

func (_c *Interface_Peers_Call) Run(run func(ctx context.Context)) *Interface_Peers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_Peers_Call) Return(_a0 []*internalcluster.Peer, _a1 error) *Interface_Peers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_Peers_Call) RunAndReturn(run func(context.Context) ([]*internalcluster.Peer, error)) *Interface_Peers_Call {
	_c.Call.Return(run)
	return _c
}

// PutActor provides a mock function with given fields: ctx, actor
func (_m *Interface) PutActor(ctx context.Context, actor *internalpb.Actor) error {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for PutActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *internalpb.Actor) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_PutActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutActor'
type Interface_PutActor_Call struct {
	*mock.Call
}

// PutActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actor *internalpb.Actor
func (_e *Interface_Expecter) PutActor(ctx interface{}, actor interface{}) *Interface_PutActor_Call {
	return &Interface_PutActor_Call{Call: _e.mock.On("PutActor", ctx, actor)}
}

func (_c *Interface_PutActor_Call) Run(run func(ctx context.Context, actor *internalpb.Actor)) *Interface_PutActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*internalpb.Actor))
	})
	return _c
}

func (_c *Interface_PutActor_Call) Return(_a0 error) *Interface_PutActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_PutActor_Call) RunAndReturn(run func(context.Context, *internalpb.Actor) error) *Interface_PutActor_Call {
	_c.Call.Return(run)
	return _c
}

// PutGrain provides a mock function with given fields: ctx, grain
func (_m *Interface) PutGrain(ctx context.Context, grain *internalpb.Grain) error {
	ret := _m.Called(ctx, grain)

	if len(ret) == 0 {
		panic("no return value specified for PutGrain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *internalpb.Grain) error); ok {
		r0 = rf(ctx, grain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_PutGrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGrain'
type Interface_PutGrain_Call struct {
	*mock.Call
}

// PutGrain is a helper method to define mock.On call
//   - ctx context.Context
//   - grain *internalpb.Grain
func (_e *Interface_Expecter) PutGrain(ctx interface{}, grain interface{}) *Interface_PutGrain_Call {
	return &Interface_PutGrain_Call{Call: _e.mock.On("PutGrain", ctx, grain)}
}

func (_c *Interface_PutGrain_Call) Run(run func(ctx context.Context, grain *internalpb.Grain)) *Interface_PutGrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*internalpb.Grain))
	})
	return _c
}

func (_c *Interface_PutGrain_Call) Return(_a0 error) *Interface_PutGrain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_PutGrain_Call) RunAndReturn(run func(context.Context, *internalpb.Grain) error) *Interface_PutGrain_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveActor provides a mock function with given fields: ctx, actorName
func (_m *Interface) RemoveActor(ctx context.Context, actorName string) error {
	ret := _m.Called(ctx, actorName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, actorName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_RemoveActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveActor'
type Interface_RemoveActor_Call struct {
	*mock.Call
}

// RemoveActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actorName string
func (_e *Interface_Expecter) RemoveActor(ctx interface{}, actorName interface{}) *Interface_RemoveActor_Call {
	return &Interface_RemoveActor_Call{Call: _e.mock.On("RemoveActor", ctx, actorName)}
}

func (_c *Interface_RemoveActor_Call) Run(run func(ctx context.Context, actorName string)) *Interface_RemoveActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_RemoveActor_Call) Return(_a0 error) *Interface_RemoveActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_RemoveActor_Call) RunAndReturn(run func(context.Context, string) error) *Interface_RemoveActor_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGrain provides a mock function with given fields: ctx, grainID
func (_m *Interface) RemoveGrain(ctx context.Context, grainID string) error {
	ret := _m.Called(ctx, grainID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGrain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, grainID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_RemoveGrain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGrain'
type Interface_RemoveGrain_Call struct {
	*mock.Call
}

// RemoveGrain is a helper method to define mock.On call
//   - ctx context.Context
//   - grainID string
func (_e *Interface_Expecter) RemoveGrain(ctx interface{}, grainID interface{}) *Interface_RemoveGrain_Call {
	return &Interface_RemoveGrain_Call{Call: _e.mock.On("RemoveGrain", ctx, grainID)}
}

func (_c *Interface_RemoveGrain_Call) Run(run func(ctx context.Context, grainID string)) *Interface_RemoveGrain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_RemoveGrain_Call) Return(_a0 error) *Interface_RemoveGrain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_RemoveGrain_Call) RunAndReturn(run func(context.Context, string) error) *Interface_RemoveGrain_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveKind provides a mock function with given fields: ctx, kind
func (_m *Interface) RemoveKind(ctx context.Context, kind string) error {
	ret := _m.Called(ctx, kind)

	if len(ret) == 0 {
		panic("no return value specified for RemoveKind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, kind)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_RemoveKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveKind'
type Interface_RemoveKind_Call struct {
	*mock.Call
}

// RemoveKind is a helper method to define mock.On call
//   - ctx context.Context
//   - kind string
func (_e *Interface_Expecter) RemoveKind(ctx interface{}, kind interface{}) *Interface_RemoveKind_Call {
	return &Interface_RemoveKind_Call{Call: _e.mock.On("RemoveKind", ctx, kind)}
}

func (_c *Interface_RemoveKind_Call) Run(run func(ctx context.Context, kind string)) *Interface_RemoveKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Interface_RemoveKind_Call) Return(_a0 error) *Interface_RemoveKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_RemoveKind_Call) RunAndReturn(run func(context.Context, string) error) *Interface_RemoveKind_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *Interface) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Interface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) Start(ctx interface{}) *Interface_Start_Call {
	return &Interface_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *Interface_Start_Call) Run(run func(ctx context.Context)) *Interface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_Start_Call) Return(_a0 error) *Interface_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Start_Call) RunAndReturn(run func(context.Context) error) *Interface_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *Interface) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Interface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Interface_Expecter) Stop(ctx interface{}) *Interface_Stop_Call {
	return &Interface_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *Interface_Stop_Call) Run(run func(ctx context.Context)) *Interface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Interface_Stop_Call) Return(_a0 error) *Interface_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Stop_Call) RunAndReturn(run func(context.Context) error) *Interface_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
