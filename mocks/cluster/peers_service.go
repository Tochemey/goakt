// Code generated by mockery. DO NOT EDIT.

package peers

import (
	context "context"

	internalpb "github.com/tochemey/goakt/v2/internal/internalpb"
	internalpeers "github.com/tochemey/goakt/v2/internal/peers"

	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

type IService_Expecter struct {
	mock *mock.Mock
}

func (_m *IService) EXPECT() *IService_Expecter {
	return &IService_Expecter{mock: &_m.Mock}
}

// Actors provides a mock function with no fields
func (_m *IService) Actors() []*internalpb.ActorRef {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Actors")
	}

	var r0 []*internalpb.ActorRef
	if rf, ok := ret.Get(0).(func() []*internalpb.ActorRef); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalpb.ActorRef)
		}
	}

	return r0
}

// IService_Actors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Actors'
type IService_Actors_Call struct {
	*mock.Call
}

// Actors is a helper method to define mock.On call
func (_e *IService_Expecter) Actors() *IService_Actors_Call {
	return &IService_Actors_Call{Call: _e.mock.On("Actors")}
}

func (_c *IService_Actors_Call) Run(run func()) *IService_Actors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Actors_Call) Return(_a0 []*internalpb.ActorRef) *IService_Actors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Actors_Call) RunAndReturn(run func() []*internalpb.ActorRef) *IService_Actors_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with no fields
func (_m *IService) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IService_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type IService_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *IService_Expecter) Address() *IService_Address_Call {
	return &IService_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *IService_Address_Call) Run(run func()) *IService_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Address_Call) Return(_a0 string) *IService_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Address_Call) RunAndReturn(run func() string) *IService_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with no fields
func (_m *IService) Events() <-chan *internalpeers.Event {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan *internalpeers.Event
	if rf, ok := ret.Get(0).(func() <-chan *internalpeers.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *internalpeers.Event)
		}
	}

	return r0
}

// IService_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type IService_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *IService_Expecter) Events() *IService_Events_Call {
	return &IService_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *IService_Events_Call) Run(run func()) *IService_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Events_Call) Return(_a0 <-chan *internalpeers.Event) *IService_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Events_Call) RunAndReturn(run func() <-chan *internalpeers.Event) *IService_Events_Call {
	_c.Call.Return(run)
	return _c
}

// GetActor provides a mock function with given fields: actorName
func (_m *IService) GetActor(actorName string) (*internalpb.ActorRef, error) {
	ret := _m.Called(actorName)

	if len(ret) == 0 {
		panic("no return value specified for GetActor")
	}

	var r0 *internalpb.ActorRef
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*internalpb.ActorRef, error)); ok {
		return rf(actorName)
	}
	if rf, ok := ret.Get(0).(func(string) *internalpb.ActorRef); ok {
		r0 = rf(actorName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.ActorRef)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(actorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_GetActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActor'
type IService_GetActor_Call struct {
	*mock.Call
}

// GetActor is a helper method to define mock.On call
//   - actorName string
func (_e *IService_Expecter) GetActor(actorName interface{}) *IService_GetActor_Call {
	return &IService_GetActor_Call{Call: _e.mock.On("GetActor", actorName)}
}

func (_c *IService_GetActor_Call) Run(run func(actorName string)) *IService_GetActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IService_GetActor_Call) Return(_a0 *internalpb.ActorRef, _a1 error) *IService_GetActor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_GetActor_Call) RunAndReturn(run func(string) (*internalpb.ActorRef, error)) *IService_GetActor_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobKey provides a mock function with given fields: jobKey
func (_m *IService) GetJobKey(jobKey string) (*string, error) {
	ret := _m.Called(jobKey)

	if len(ret) == 0 {
		panic("no return value specified for GetJobKey")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(jobKey)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(jobKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jobKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_GetJobKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobKey'
type IService_GetJobKey_Call struct {
	*mock.Call
}

// GetJobKey is a helper method to define mock.On call
//   - jobKey string
func (_e *IService_Expecter) GetJobKey(jobKey interface{}) *IService_GetJobKey_Call {
	return &IService_GetJobKey_Call{Call: _e.mock.On("GetJobKey", jobKey)}
}

func (_c *IService_GetJobKey_Call) Run(run func(jobKey string)) *IService_GetJobKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IService_GetJobKey_Call) Return(_a0 *string, _a1 error) *IService_GetJobKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_GetJobKey_Call) RunAndReturn(run func(string) (*string, error)) *IService_GetJobKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeerRedeployment provides a mock function with given fields: peerAddress
func (_m *IService) GetPeerRedeployment(peerAddress string) []*internalpb.ActorRef {
	ret := _m.Called(peerAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetPeerRedeployment")
	}

	var r0 []*internalpb.ActorRef
	if rf, ok := ret.Get(0).(func(string) []*internalpb.ActorRef); ok {
		r0 = rf(peerAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalpb.ActorRef)
		}
	}

	return r0
}

// IService_GetPeerRedeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeerRedeployment'
type IService_GetPeerRedeployment_Call struct {
	*mock.Call
}

// GetPeerRedeployment is a helper method to define mock.On call
//   - peerAddress string
func (_e *IService_Expecter) GetPeerRedeployment(peerAddress interface{}) *IService_GetPeerRedeployment_Call {
	return &IService_GetPeerRedeployment_Call{Call: _e.mock.On("GetPeerRedeployment", peerAddress)}
}

func (_c *IService_GetPeerRedeployment_Call) Run(run func(peerAddress string)) *IService_GetPeerRedeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IService_GetPeerRedeployment_Call) Return(_a0 []*internalpb.ActorRef) *IService_GetPeerRedeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_GetPeerRedeployment_Call) RunAndReturn(run func(string) []*internalpb.ActorRef) *IService_GetPeerRedeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeerState provides a mock function with given fields: peerAddress
func (_m *IService) GetPeerState(peerAddress string) (*internalpb.PeerState, error) {
	ret := _m.Called(peerAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetPeerState")
	}

	var r0 *internalpb.PeerState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*internalpb.PeerState, error)); ok {
		return rf(peerAddress)
	}
	if rf, ok := ret.Get(0).(func(string) *internalpb.PeerState); ok {
		r0 = rf(peerAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpb.PeerState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(peerAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_GetPeerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeerState'
type IService_GetPeerState_Call struct {
	*mock.Call
}

// GetPeerState is a helper method to define mock.On call
//   - peerAddress string
func (_e *IService_Expecter) GetPeerState(peerAddress interface{}) *IService_GetPeerState_Call {
	return &IService_GetPeerState_Call{Call: _e.mock.On("GetPeerState", peerAddress)}
}

func (_c *IService_GetPeerState_Call) Run(run func(peerAddress string)) *IService_GetPeerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IService_GetPeerState_Call) Return(_a0 *internalpb.PeerState, _a1 error) *IService_GetPeerState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_GetPeerState_Call) RunAndReturn(run func(string) (*internalpb.PeerState, error)) *IService_GetPeerState_Call {
	_c.Call.Return(run)
	return _c
}

// IsLeader provides a mock function with no fields
func (_m *IService) IsLeader() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_IsLeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeader'
type IService_IsLeader_Call struct {
	*mock.Call
}

// IsLeader is a helper method to define mock.On call
func (_e *IService_Expecter) IsLeader() *IService_IsLeader_Call {
	return &IService_IsLeader_Call{Call: _e.mock.On("IsLeader")}
}

func (_c *IService_IsLeader_Call) Run(run func()) *IService_IsLeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_IsLeader_Call) Return(_a0 bool, _a1 error) *IService_IsLeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_IsLeader_Call) RunAndReturn(run func() (bool, error)) *IService_IsLeader_Call {
	_c.Call.Return(run)
	return _c
}

// Leader provides a mock function with no fields
func (_m *IService) Leader() (*internalpeers.Peer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Leader")
	}

	var r0 *internalpeers.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func() (*internalpeers.Peer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *internalpeers.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpeers.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_Leader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leader'
type IService_Leader_Call struct {
	*mock.Call
}

// Leader is a helper method to define mock.On call
func (_e *IService_Expecter) Leader() *IService_Leader_Call {
	return &IService_Leader_Call{Call: _e.mock.On("Leader")}
}

func (_c *IService_Leader_Call) Run(run func()) *IService_Leader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Leader_Call) Return(_a0 *internalpeers.Peer, _a1 error) *IService_Leader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_Leader_Call) RunAndReturn(run func() (*internalpeers.Peer, error)) *IService_Leader_Call {
	_c.Call.Return(run)
	return _c
}

// Peers provides a mock function with no fields
func (_m *IService) Peers() ([]*internalpeers.Peer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Peers")
	}

	var r0 []*internalpeers.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*internalpeers.Peer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*internalpeers.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internalpeers.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IService_Peers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peers'
type IService_Peers_Call struct {
	*mock.Call
}

// Peers is a helper method to define mock.On call
func (_e *IService_Expecter) Peers() *IService_Peers_Call {
	return &IService_Peers_Call{Call: _e.mock.On("Peers")}
}

func (_c *IService_Peers_Call) Run(run func()) *IService_Peers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Peers_Call) Return(_a0 []*internalpeers.Peer, _a1 error) *IService_Peers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IService_Peers_Call) RunAndReturn(run func() ([]*internalpeers.Peer, error)) *IService_Peers_Call {
	_c.Call.Return(run)
	return _c
}

// PutActor provides a mock function with given fields: ctx, actor
func (_m *IService) PutActor(ctx context.Context, actor *internalpb.ActorRef) error {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for PutActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *internalpb.ActorRef) error); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_PutActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutActor'
type IService_PutActor_Call struct {
	*mock.Call
}

// PutActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actor *internalpb.ActorRef
func (_e *IService_Expecter) PutActor(ctx interface{}, actor interface{}) *IService_PutActor_Call {
	return &IService_PutActor_Call{Call: _e.mock.On("PutActor", ctx, actor)}
}

func (_c *IService_PutActor_Call) Run(run func(ctx context.Context, actor *internalpb.ActorRef)) *IService_PutActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*internalpb.ActorRef))
	})
	return _c
}

func (_c *IService_PutActor_Call) Return(_a0 error) *IService_PutActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_PutActor_Call) RunAndReturn(run func(context.Context, *internalpb.ActorRef) error) *IService_PutActor_Call {
	_c.Call.Return(run)
	return _c
}

// PutJobKey provides a mock function with given fields: ctx, jobKey
func (_m *IService) PutJobKey(ctx context.Context, jobKey string) error {
	ret := _m.Called(ctx, jobKey)

	if len(ret) == 0 {
		panic("no return value specified for PutJobKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_PutJobKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutJobKey'
type IService_PutJobKey_Call struct {
	*mock.Call
}

// PutJobKey is a helper method to define mock.On call
//   - ctx context.Context
//   - jobKey string
func (_e *IService_Expecter) PutJobKey(ctx interface{}, jobKey interface{}) *IService_PutJobKey_Call {
	return &IService_PutJobKey_Call{Call: _e.mock.On("PutJobKey", ctx, jobKey)}
}

func (_c *IService_PutJobKey_Call) Run(run func(ctx context.Context, jobKey string)) *IService_PutJobKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IService_PutJobKey_Call) Return(_a0 error) *IService_PutJobKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_PutJobKey_Call) RunAndReturn(run func(context.Context, string) error) *IService_PutJobKey_Call {
	_c.Call.Return(run)
	return _c
}

// PutPeerRedeployment provides a mock function with given fields: ctx, actors
func (_m *IService) PutPeerRedeployment(ctx context.Context, actors []*internalpb.ActorRef) error {
	ret := _m.Called(ctx, actors)

	if len(ret) == 0 {
		panic("no return value specified for PutPeerRedeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*internalpb.ActorRef) error); ok {
		r0 = rf(ctx, actors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_PutPeerRedeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPeerRedeployment'
type IService_PutPeerRedeployment_Call struct {
	*mock.Call
}

// PutPeerRedeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - actors []*internalpb.ActorRef
func (_e *IService_Expecter) PutPeerRedeployment(ctx interface{}, actors interface{}) *IService_PutPeerRedeployment_Call {
	return &IService_PutPeerRedeployment_Call{Call: _e.mock.On("PutPeerRedeployment", ctx, actors)}
}

func (_c *IService_PutPeerRedeployment_Call) Run(run func(ctx context.Context, actors []*internalpb.ActorRef)) *IService_PutPeerRedeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*internalpb.ActorRef))
	})
	return _c
}

func (_c *IService_PutPeerRedeployment_Call) Return(_a0 error) *IService_PutPeerRedeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_PutPeerRedeployment_Call) RunAndReturn(run func(context.Context, []*internalpb.ActorRef) error) *IService_PutPeerRedeployment_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveActor provides a mock function with given fields: ctx, actorName
func (_m *IService) RemoveActor(ctx context.Context, actorName string) error {
	ret := _m.Called(ctx, actorName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, actorName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_RemoveActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveActor'
type IService_RemoveActor_Call struct {
	*mock.Call
}

// RemoveActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actorName string
func (_e *IService_Expecter) RemoveActor(ctx interface{}, actorName interface{}) *IService_RemoveActor_Call {
	return &IService_RemoveActor_Call{Call: _e.mock.On("RemoveActor", ctx, actorName)}
}

func (_c *IService_RemoveActor_Call) Run(run func(ctx context.Context, actorName string)) *IService_RemoveActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IService_RemoveActor_Call) Return(_a0 error) *IService_RemoveActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_RemoveActor_Call) RunAndReturn(run func(context.Context, string) error) *IService_RemoveActor_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveJobKey provides a mock function with given fields: ctx, jobKey
func (_m *IService) RemoveJobKey(ctx context.Context, jobKey string) error {
	ret := _m.Called(ctx, jobKey)

	if len(ret) == 0 {
		panic("no return value specified for RemoveJobKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jobKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_RemoveJobKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveJobKey'
type IService_RemoveJobKey_Call struct {
	*mock.Call
}

// RemoveJobKey is a helper method to define mock.On call
//   - ctx context.Context
//   - jobKey string
func (_e *IService_Expecter) RemoveJobKey(ctx interface{}, jobKey interface{}) *IService_RemoveJobKey_Call {
	return &IService_RemoveJobKey_Call{Call: _e.mock.On("RemoveJobKey", ctx, jobKey)}
}

func (_c *IService_RemoveJobKey_Call) Run(run func(ctx context.Context, jobKey string)) *IService_RemoveJobKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IService_RemoveJobKey_Call) Return(_a0 error) *IService_RemoveJobKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_RemoveJobKey_Call) RunAndReturn(run func(context.Context, string) error) *IService_RemoveJobKey_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePeerRedeployment provides a mock function with given fields: ctx, peerAddress
func (_m *IService) RemovePeerRedeployment(ctx context.Context, peerAddress string) error {
	ret := _m.Called(ctx, peerAddress)

	if len(ret) == 0 {
		panic("no return value specified for RemovePeerRedeployment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, peerAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_RemovePeerRedeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeerRedeployment'
type IService_RemovePeerRedeployment_Call struct {
	*mock.Call
}

// RemovePeerRedeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - peerAddress string
func (_e *IService_Expecter) RemovePeerRedeployment(ctx interface{}, peerAddress interface{}) *IService_RemovePeerRedeployment_Call {
	return &IService_RemovePeerRedeployment_Call{Call: _e.mock.On("RemovePeerRedeployment", ctx, peerAddress)}
}

func (_c *IService_RemovePeerRedeployment_Call) Run(run func(ctx context.Context, peerAddress string)) *IService_RemovePeerRedeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IService_RemovePeerRedeployment_Call) Return(_a0 error) *IService_RemovePeerRedeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_RemovePeerRedeployment_Call) RunAndReturn(run func(context.Context, string) error) *IService_RemovePeerRedeployment_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePeerState provides a mock function with given fields: ctx, peerAddress
func (_m *IService) RemovePeerState(ctx context.Context, peerAddress string) error {
	ret := _m.Called(ctx, peerAddress)

	if len(ret) == 0 {
		panic("no return value specified for RemovePeerState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, peerAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_RemovePeerState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePeerState'
type IService_RemovePeerState_Call struct {
	*mock.Call
}

// RemovePeerState is a helper method to define mock.On call
//   - ctx context.Context
//   - peerAddress string
func (_e *IService_Expecter) RemovePeerState(ctx interface{}, peerAddress interface{}) *IService_RemovePeerState_Call {
	return &IService_RemovePeerState_Call{Call: _e.mock.On("RemovePeerState", ctx, peerAddress)}
}

func (_c *IService_RemovePeerState_Call) Run(run func(ctx context.Context, peerAddress string)) *IService_RemovePeerState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IService_RemovePeerState_Call) Return(_a0 error) *IService_RemovePeerState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_RemovePeerState_Call) RunAndReturn(run func(context.Context, string) error) *IService_RemovePeerState_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *IService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IService_Expecter) Start(ctx interface{}) *IService_Start_Call {
	return &IService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *IService_Start_Call) Run(run func(ctx context.Context)) *IService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IService_Start_Call) Return(_a0 error) *IService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Start_Call) RunAndReturn(run func(context.Context) error) *IService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *IService) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type IService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IService_Expecter) Stop(ctx interface{}) *IService_Stop_Call {
	return &IService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *IService_Stop_Call) Run(run func(ctx context.Context)) *IService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IService_Stop_Call) Return(_a0 error) *IService_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Stop_Call) RunAndReturn(run func(context.Context) error) *IService_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Whoami provides a mock function with no fields
func (_m *IService) Whoami() *internalpeers.Peer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Whoami")
	}

	var r0 *internalpeers.Peer
	if rf, ok := ret.Get(0).(func() *internalpeers.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalpeers.Peer)
		}
	}

	return r0
}

// IService_Whoami_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Whoami'
type IService_Whoami_Call struct {
	*mock.Call
}

// Whoami is a helper method to define mock.On call
func (_e *IService_Expecter) Whoami() *IService_Whoami_Call {
	return &IService_Whoami_Call{Call: _e.mock.On("Whoami")}
}

func (_c *IService_Whoami_Call) Run(run func()) *IService_Whoami_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IService_Whoami_Call) Return(_a0 *internalpeers.Peer) *IService_Whoami_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IService_Whoami_Call) RunAndReturn(run func() *internalpeers.Peer) *IService_Whoami_Call {
	_c.Call.Return(run)
	return _c
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
