// Code generated by mockery. DO NOT EDIT.

package extension

import mock "github.com/stretchr/testify/mock"

// Dependency is an autogenerated mock type for the Dependency type
type Dependency struct {
	mock.Mock
}

type Dependency_Expecter struct {
	mock *mock.Mock
}

func (_m *Dependency) EXPECT() *Dependency_Expecter {
	return &Dependency_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with no fields
func (_m *Dependency) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Dependency_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Dependency_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Dependency_Expecter) ID() *Dependency_ID_Call {
	return &Dependency_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Dependency_ID_Call) Run(run func()) *Dependency_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Dependency_ID_Call) Return(_a0 string) *Dependency_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Dependency_ID_Call) RunAndReturn(run func() string) *Dependency_ID_Call {
	_c.Call.Return(run)
	return _c
}

// MarshalBinary provides a mock function with no fields
func (_m *Dependency) MarshalBinary() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalBinary")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dependency_MarshalBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalBinary'
type Dependency_MarshalBinary_Call struct {
	*mock.Call
}

// MarshalBinary is a helper method to define mock.On call
func (_e *Dependency_Expecter) MarshalBinary() *Dependency_MarshalBinary_Call {
	return &Dependency_MarshalBinary_Call{Call: _e.mock.On("MarshalBinary")}
}

func (_c *Dependency_MarshalBinary_Call) Run(run func()) *Dependency_MarshalBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Dependency_MarshalBinary_Call) Return(data []byte, err error) *Dependency_MarshalBinary_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *Dependency_MarshalBinary_Call) RunAndReturn(run func() ([]byte, error)) *Dependency_MarshalBinary_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalBinary provides a mock function with given fields: data
func (_m *Dependency) UnmarshalBinary(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dependency_UnmarshalBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalBinary'
type Dependency_UnmarshalBinary_Call struct {
	*mock.Call
}

// UnmarshalBinary is a helper method to define mock.On call
//   - data []byte
func (_e *Dependency_Expecter) UnmarshalBinary(data interface{}) *Dependency_UnmarshalBinary_Call {
	return &Dependency_UnmarshalBinary_Call{Call: _e.mock.On("UnmarshalBinary", data)}
}

func (_c *Dependency_UnmarshalBinary_Call) Run(run func(data []byte)) *Dependency_UnmarshalBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Dependency_UnmarshalBinary_Call) Return(_a0 error) *Dependency_UnmarshalBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Dependency_UnmarshalBinary_Call) RunAndReturn(run func([]byte) error) *Dependency_UnmarshalBinary_Call {
	_c.Call.Return(run)
	return _c
}

// NewDependency creates a new instance of Dependency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDependency(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dependency {
	mock := &Dependency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
