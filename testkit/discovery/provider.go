// Code generated by mockery v2.32.4. DO NOT EDIT.

package discovery

import (
	mock "github.com/stretchr/testify/mock"
	goaktdiscovery "github.com/tochemey/goakt/discovery"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Provider) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Provider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Provider_Expecter) Close() *Provider_Close_Call {
	return &Provider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Provider_Close_Call) Run(run func()) *Provider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Close_Call) Return(_a0 error) *Provider_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Close_Call) RunAndReturn(run func() error) *Provider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Deregister provides a mock function with given fields:
func (_m *Provider) Deregister() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Deregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deregister'
type Provider_Deregister_Call struct {
	*mock.Call
}

// Deregister is a helper method to define mock.On call
func (_e *Provider_Expecter) Deregister() *Provider_Deregister_Call {
	return &Provider_Deregister_Call{Call: _e.mock.On("Deregister")}
}

func (_c *Provider_Deregister_Call) Run(run func()) *Provider_Deregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Deregister_Call) Return(_a0 error) *Provider_Deregister_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Deregister_Call) RunAndReturn(run func() error) *Provider_Deregister_Call {
	_c.Call.Return(run)
	return _c
}

// DiscoverPeers provides a mock function with given fields:
func (_m *Provider) DiscoverPeers() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_DiscoverPeers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverPeers'
type Provider_DiscoverPeers_Call struct {
	*mock.Call
}

// DiscoverPeers is a helper method to define mock.On call
func (_e *Provider_Expecter) DiscoverPeers() *Provider_DiscoverPeers_Call {
	return &Provider_DiscoverPeers_Call{Call: _e.mock.On("DiscoverPeers")}
}

func (_c *Provider_DiscoverPeers_Call) Run(run func()) *Provider_DiscoverPeers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_DiscoverPeers_Call) Return(_a0 []string, _a1 error) *Provider_DiscoverPeers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_DiscoverPeers_Call) RunAndReturn(run func() ([]string, error)) *Provider_DiscoverPeers_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *Provider) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Provider_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Provider_Expecter) ID() *Provider_ID_Call {
	return &Provider_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Provider_ID_Call) Run(run func()) *Provider_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_ID_Call) Return(_a0 string) *Provider_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_ID_Call) RunAndReturn(run func() string) *Provider_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields:
func (_m *Provider) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Provider_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *Provider_Expecter) Initialize() *Provider_Initialize_Call {
	return &Provider_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *Provider_Initialize_Call) Run(run func()) *Provider_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Initialize_Call) Return(_a0 error) *Provider_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Initialize_Call) RunAndReturn(run func() error) *Provider_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields:
func (_m *Provider) Register() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Provider_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *Provider_Expecter) Register() *Provider_Register_Call {
	return &Provider_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *Provider_Register_Call) Run(run func()) *Provider_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Register_Call) Return(_a0 error) *Provider_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Register_Call) RunAndReturn(run func() error) *Provider_Register_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: config
func (_m *Provider) SetConfig(config goaktdiscovery.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(goaktdiscovery.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type Provider_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - config goaktdiscovery.Config
func (_e *Provider_Expecter) SetConfig(config interface{}) *Provider_SetConfig_Call {
	return &Provider_SetConfig_Call{Call: _e.mock.On("SetConfig", config)}
}

func (_c *Provider_SetConfig_Call) Run(run func(config goaktdiscovery.Config)) *Provider_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(goaktdiscovery.Config))
	})
	return _c
}

func (_c *Provider_SetConfig_Call) Return(_a0 error) *Provider_SetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_SetConfig_Call) RunAndReturn(run func(goaktdiscovery.Config) error) *Provider_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
