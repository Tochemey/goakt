// Code generated by mockery v2.32.4. DO NOT EDIT.

package internalpbconnect

import (
	context "context"

	connect "connectrpc.com/connect"

	internalpb "github.com/tochemey/goakt/internal/v1"

	mock "github.com/stretchr/testify/mock"
)

// RemoteMessagingServiceClient is an autogenerated mock type for the RemoteMessagingServiceClient type
type RemoteMessagingServiceClient struct {
	mock.Mock
}

type RemoteMessagingServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteMessagingServiceClient) EXPECT() *RemoteMessagingServiceClient_Expecter {
	return &RemoteMessagingServiceClient_Expecter{mock: &_m.Mock}
}

// RemoteAsk provides a mock function with given fields: _a0, _a1
func (_m *RemoteMessagingServiceClient) RemoteAsk(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteAskRequest]) (*connect.Response[internalpb.RemoteAskResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[internalpb.RemoteAskResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteAskRequest]) (*connect.Response[internalpb.RemoteAskResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteAskRequest]) *connect.Response[internalpb.RemoteAskResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[internalpb.RemoteAskResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[internalpb.RemoteAskRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteMessagingServiceClient_RemoteAsk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteAsk'
type RemoteMessagingServiceClient_RemoteAsk_Call struct {
	*mock.Call
}

// RemoteAsk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[internalpb.RemoteAskRequest]
func (_e *RemoteMessagingServiceClient_Expecter) RemoteAsk(_a0 interface{}, _a1 interface{}) *RemoteMessagingServiceClient_RemoteAsk_Call {
	return &RemoteMessagingServiceClient_RemoteAsk_Call{Call: _e.mock.On("RemoteAsk", _a0, _a1)}
}

func (_c *RemoteMessagingServiceClient_RemoteAsk_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteAskRequest])) *RemoteMessagingServiceClient_RemoteAsk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[internalpb.RemoteAskRequest]))
	})
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteAsk_Call) Return(_a0 *connect.Response[internalpb.RemoteAskResponse], _a1 error) *RemoteMessagingServiceClient_RemoteAsk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteAsk_Call) RunAndReturn(run func(context.Context, *connect.Request[internalpb.RemoteAskRequest]) (*connect.Response[internalpb.RemoteAskResponse], error)) *RemoteMessagingServiceClient_RemoteAsk_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteLookup provides a mock function with given fields: _a0, _a1
func (_m *RemoteMessagingServiceClient) RemoteLookup(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteLookupRequest]) (*connect.Response[internalpb.RemoteLookupResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[internalpb.RemoteLookupResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteLookupRequest]) (*connect.Response[internalpb.RemoteLookupResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteLookupRequest]) *connect.Response[internalpb.RemoteLookupResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[internalpb.RemoteLookupResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[internalpb.RemoteLookupRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteMessagingServiceClient_RemoteLookup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteLookup'
type RemoteMessagingServiceClient_RemoteLookup_Call struct {
	*mock.Call
}

// RemoteLookup is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[internalpb.RemoteLookupRequest]
func (_e *RemoteMessagingServiceClient_Expecter) RemoteLookup(_a0 interface{}, _a1 interface{}) *RemoteMessagingServiceClient_RemoteLookup_Call {
	return &RemoteMessagingServiceClient_RemoteLookup_Call{Call: _e.mock.On("RemoteLookup", _a0, _a1)}
}

func (_c *RemoteMessagingServiceClient_RemoteLookup_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteLookupRequest])) *RemoteMessagingServiceClient_RemoteLookup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[internalpb.RemoteLookupRequest]))
	})
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteLookup_Call) Return(_a0 *connect.Response[internalpb.RemoteLookupResponse], _a1 error) *RemoteMessagingServiceClient_RemoteLookup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteLookup_Call) RunAndReturn(run func(context.Context, *connect.Request[internalpb.RemoteLookupRequest]) (*connect.Response[internalpb.RemoteLookupResponse], error)) *RemoteMessagingServiceClient_RemoteLookup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteTell provides a mock function with given fields: _a0, _a1
func (_m *RemoteMessagingServiceClient) RemoteTell(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteTellRequest]) (*connect.Response[internalpb.RemoteTellResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[internalpb.RemoteTellResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteTellRequest]) (*connect.Response[internalpb.RemoteTellResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[internalpb.RemoteTellRequest]) *connect.Response[internalpb.RemoteTellResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[internalpb.RemoteTellResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[internalpb.RemoteTellRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteMessagingServiceClient_RemoteTell_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteTell'
type RemoteMessagingServiceClient_RemoteTell_Call struct {
	*mock.Call
}

// RemoteTell is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[internalpb.RemoteTellRequest]
func (_e *RemoteMessagingServiceClient_Expecter) RemoteTell(_a0 interface{}, _a1 interface{}) *RemoteMessagingServiceClient_RemoteTell_Call {
	return &RemoteMessagingServiceClient_RemoteTell_Call{Call: _e.mock.On("RemoteTell", _a0, _a1)}
}

func (_c *RemoteMessagingServiceClient_RemoteTell_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[internalpb.RemoteTellRequest])) *RemoteMessagingServiceClient_RemoteTell_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[internalpb.RemoteTellRequest]))
	})
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteTell_Call) Return(_a0 *connect.Response[internalpb.RemoteTellResponse], _a1 error) *RemoteMessagingServiceClient_RemoteTell_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteMessagingServiceClient_RemoteTell_Call) RunAndReturn(run func(context.Context, *connect.Request[internalpb.RemoteTellRequest]) (*connect.Response[internalpb.RemoteTellResponse], error)) *RemoteMessagingServiceClient_RemoteTell_Call {
	_c.Call.Return(run)
	return _c
}

// NewRemoteMessagingServiceClient creates a new instance of RemoteMessagingServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteMessagingServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteMessagingServiceClient {
	mock := &RemoteMessagingServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
