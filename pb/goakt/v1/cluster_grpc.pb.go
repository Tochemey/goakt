// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: goakt/v1/cluster.proto

package goaktv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeStateReplicationServiceClient is the client API for NodeStateReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeStateReplicationServiceClient interface {
	PutActorMeta(ctx context.Context, in *PutActorMetaRequest, opts ...grpc.CallOption) (*PutActorMetaResponse, error)
	GetActorMeta(ctx context.Context, in *GetActorMetaRequest, opts ...grpc.CallOption) (*GetActorMetaResponse, error)
}

type nodeStateReplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeStateReplicationServiceClient(cc grpc.ClientConnInterface) NodeStateReplicationServiceClient {
	return &nodeStateReplicationServiceClient{cc}
}

func (c *nodeStateReplicationServiceClient) PutActorMeta(ctx context.Context, in *PutActorMetaRequest, opts ...grpc.CallOption) (*PutActorMetaResponse, error) {
	out := new(PutActorMetaResponse)
	err := c.cc.Invoke(ctx, "/goakt.v1.NodeStateReplicationService/PutActorMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeStateReplicationServiceClient) GetActorMeta(ctx context.Context, in *GetActorMetaRequest, opts ...grpc.CallOption) (*GetActorMetaResponse, error) {
	out := new(GetActorMetaResponse)
	err := c.cc.Invoke(ctx, "/goakt.v1.NodeStateReplicationService/GetActorMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeStateReplicationServiceServer is the server API for NodeStateReplicationService service.
// All implementations should embed UnimplementedNodeStateReplicationServiceServer
// for forward compatibility
type NodeStateReplicationServiceServer interface {
	PutActorMeta(context.Context, *PutActorMetaRequest) (*PutActorMetaResponse, error)
	GetActorMeta(context.Context, *GetActorMetaRequest) (*GetActorMetaResponse, error)
}

// UnimplementedNodeStateReplicationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeStateReplicationServiceServer struct {
}

func (UnimplementedNodeStateReplicationServiceServer) PutActorMeta(context.Context, *PutActorMetaRequest) (*PutActorMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutActorMeta not implemented")
}
func (UnimplementedNodeStateReplicationServiceServer) GetActorMeta(context.Context, *GetActorMetaRequest) (*GetActorMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActorMeta not implemented")
}

// UnsafeNodeStateReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeStateReplicationServiceServer will
// result in compilation errors.
type UnsafeNodeStateReplicationServiceServer interface {
	mustEmbedUnimplementedNodeStateReplicationServiceServer()
}

func RegisterNodeStateReplicationServiceServer(s grpc.ServiceRegistrar, srv NodeStateReplicationServiceServer) {
	s.RegisterService(&NodeStateReplicationService_ServiceDesc, srv)
}

func _NodeStateReplicationService_PutActorMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutActorMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateReplicationServiceServer).PutActorMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goakt.v1.NodeStateReplicationService/PutActorMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateReplicationServiceServer).PutActorMeta(ctx, req.(*PutActorMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeStateReplicationService_GetActorMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeStateReplicationServiceServer).GetActorMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goakt.v1.NodeStateReplicationService/GetActorMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeStateReplicationServiceServer).GetActorMeta(ctx, req.(*GetActorMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeStateReplicationService_ServiceDesc is the grpc.ServiceDesc for NodeStateReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeStateReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goakt.v1.NodeStateReplicationService",
	HandlerType: (*NodeStateReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutActorMeta",
			Handler:    _NodeStateReplicationService_PutActorMeta_Handler,
		},
		{
			MethodName: "GetActorMeta",
			Handler:    _NodeStateReplicationService_GetActorMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goakt/v1/cluster.proto",
}
