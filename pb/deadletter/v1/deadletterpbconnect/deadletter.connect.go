// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deadletter/v1/deadletter.proto

package deadletterpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tochemey/goakt/pb/deadletter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DeadletterSubscriptionServiceName is the fully-qualified name of the
	// DeadletterSubscriptionService service.
	DeadletterSubscriptionServiceName = "deadletter.v1.DeadletterSubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeadletterSubscriptionServiceSubscribeProcedure is the fully-qualified name of the
	// DeadletterSubscriptionService's Subscribe RPC.
	DeadletterSubscriptionServiceSubscribeProcedure = "/deadletter.v1.DeadletterSubscriptionService/Subscribe"
)

// DeadletterSubscriptionServiceClient is a client for the
// deadletter.v1.DeadletterSubscriptionService service.
type DeadletterSubscriptionServiceClient interface {
	// Subscribe helps any service to subscribe to the deadletter stream
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error)
}

// NewDeadletterSubscriptionServiceClient constructs a client for the
// deadletter.v1.DeadletterSubscriptionService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeadletterSubscriptionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeadletterSubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deadletterSubscriptionServiceClient{
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.SubscribeResponse](
			httpClient,
			baseURL+DeadletterSubscriptionServiceSubscribeProcedure,
			opts...,
		),
	}
}

// deadletterSubscriptionServiceClient implements DeadletterSubscriptionServiceClient.
type deadletterSubscriptionServiceClient struct {
	subscribe *connect.Client[v1.SubscribeRequest, v1.SubscribeResponse]
}

// Subscribe calls deadletter.v1.DeadletterSubscriptionService.Subscribe.
func (c *deadletterSubscriptionServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// DeadletterSubscriptionServiceHandler is an implementation of the
// deadletter.v1.DeadletterSubscriptionService service.
type DeadletterSubscriptionServiceHandler interface {
	// Subscribe helps any service to subscribe to the deadletter stream
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error
}

// NewDeadletterSubscriptionServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeadletterSubscriptionServiceHandler(svc DeadletterSubscriptionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deadletterSubscriptionServiceSubscribeHandler := connect.NewServerStreamHandler(
		DeadletterSubscriptionServiceSubscribeProcedure,
		svc.Subscribe,
		opts...,
	)
	return "/deadletter.v1.DeadletterSubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeadletterSubscriptionServiceSubscribeProcedure:
			deadletterSubscriptionServiceSubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeadletterSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeadletterSubscriptionServiceHandler struct{}

func (UnimplementedDeadletterSubscriptionServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest], *connect.ServerStream[v1.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("deadletter.v1.DeadletterSubscriptionService.Subscribe is not implemented"))
}
