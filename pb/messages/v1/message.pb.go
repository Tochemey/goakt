// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: messages/v1/message.proto

package messagespb

import (
	v1 "github.com/tochemey/goakt/pb/address/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Terminated is used to notify watching actors
// of the shutdown of its child actor.
type Terminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Terminated) Reset() {
	*x = Terminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Terminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Terminated) ProtoMessage() {}

func (x *Terminated) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Terminated.ProtoReflect.Descriptor instead.
func (*Terminated) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{0}
}

// PoisonPill is sent the stop an actor.
// It is enqueued as ordinary messages.
// It will be handled after messages that were already queued in the mailbox.
type PoisonPill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoisonPill) Reset() {
	*x = PoisonPill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoisonPill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoisonPill) ProtoMessage() {}

func (x *PoisonPill) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoisonPill.ProtoReflect.Descriptor instead.
func (*PoisonPill) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{1}
}

// Scheduled encapsulates a message that will be sent to an actor
// in the future. The receiving actor can be a local or a remote actor
// When it is a remote actor make sure that remoting is enabled in the
// actor system
type Scheduled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the actual message
	Message *anypb.Any `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Specifies the sender's address
	Sender *v1.Address `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Specifies the actor address
	Receiver *v1.Address `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Specifies the frequency
	Frequency *ScheduledFrequency `protobuf:"bytes,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *Scheduled) Reset() {
	*x = Scheduled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduled) ProtoMessage() {}

func (x *Scheduled) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduled.ProtoReflect.Descriptor instead.
func (*Scheduled) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *Scheduled) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Scheduled) GetSender() *v1.Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Scheduled) GetReceiver() *v1.Address {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *Scheduled) GetFrequency() *ScheduledFrequency {
	if x != nil {
		return x.Frequency
	}
	return nil
}

// ScheduledOnce states that the scheduled message
// will only be sent once to the receiving actor
type ScheduledOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the time when the to send the message
	// The timestamp must include the following:
	// year, month, day of month, hour, minute and second
	When *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *ScheduledOnce) Reset() {
	*x = ScheduledOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledOnce) ProtoMessage() {}

func (x *ScheduledOnce) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledOnce.ProtoReflect.Descriptor instead.
func (*ScheduledOnce) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *ScheduledOnce) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

// ScheduledRepeatedly states that the scheduled message
// will be sent to the receiving actor n times with a given delay interval
type ScheduledRepeatedly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the number of times to send the message
	Times int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	// Specifies the delay interval between messages sent
	Delay int64 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	// Specifies the time when to send the message
	When *ScheduledTime `protobuf:"bytes,3,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *ScheduledRepeatedly) Reset() {
	*x = ScheduledRepeatedly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledRepeatedly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledRepeatedly) ProtoMessage() {}

func (x *ScheduledRepeatedly) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledRepeatedly.ProtoReflect.Descriptor instead.
func (*ScheduledRepeatedly) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *ScheduledRepeatedly) GetTimes() int32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *ScheduledRepeatedly) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *ScheduledRepeatedly) GetWhen() *ScheduledTime {
	if x != nil {
		return x.When
	}
	return nil
}

// ScheduledFrequency defines how often the scheduled message should be sent
// to the receiving actor
type ScheduledFrequency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the frequency value.
	//
	// Types that are assignable to Value:
	//
	//	*ScheduledFrequency_Once
	//	*ScheduledFrequency_Repeatedly
	Value isScheduledFrequency_Value `protobuf_oneof:"value"`
}

func (x *ScheduledFrequency) Reset() {
	*x = ScheduledFrequency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledFrequency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledFrequency) ProtoMessage() {}

func (x *ScheduledFrequency) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledFrequency.ProtoReflect.Descriptor instead.
func (*ScheduledFrequency) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{5}
}

func (m *ScheduledFrequency) GetValue() isScheduledFrequency_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ScheduledFrequency) GetOnce() *ScheduledOnce {
	if x, ok := x.GetValue().(*ScheduledFrequency_Once); ok {
		return x.Once
	}
	return nil
}

func (x *ScheduledFrequency) GetRepeatedly() *ScheduledRepeatedly {
	if x, ok := x.GetValue().(*ScheduledFrequency_Repeatedly); ok {
		return x.Repeatedly
	}
	return nil
}

type isScheduledFrequency_Value interface {
	isScheduledFrequency_Value()
}

type ScheduledFrequency_Once struct {
	// Specifies to send the message once
	Once *ScheduledOnce `protobuf:"bytes,1,opt,name=once,proto3,oneof"`
}

type ScheduledFrequency_Repeatedly struct {
	// Specifies the send the message n times
	Repeatedly *ScheduledRepeatedly `protobuf:"bytes,2,opt,name=repeatedly,proto3,oneof"`
}

func (*ScheduledFrequency_Once) isScheduledFrequency_Value() {}

func (*ScheduledFrequency_Repeatedly) isScheduledFrequency_Value() {}

// ScheduledTime defines the date time of a scheduled message
type ScheduledTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Month of year. Must be from 1 to 12.
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// Day of month. Must be from 1 to 31 and valid for the year and
	// month.
	Day int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	// Hours of day in 24 hour format. Should be from 0 to 23. An API
	// may choose to allow the value "24:00:00" for scenarios like business
	// closing time.
	Hours int32 `protobuf:"varint,4,opt,name=hours,proto3" json:"hours,omitempty"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int32 `protobuf:"varint,5,opt,name=minutes,proto3" json:"minutes,omitempty"`
	// Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
	// API may allow the value 60 if it allows leap-seconds.
	Seconds int32 `protobuf:"varint,6,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// UTC offset. Must be whole seconds, between -18 hours and +18 hours.
	// For example, a UTC offset of -4:00 would be represented as
	// { seconds: -14400 }.
	UtcOffset *durationpb.Duration `protobuf:"bytes,8,opt,name=utc_offset,json=utcOffset,proto3,oneof" json:"utc_offset,omitempty"`
}

func (x *ScheduledTime) Reset() {
	*x = ScheduledTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_v1_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledTime) ProtoMessage() {}

func (x *ScheduledTime) ProtoReflect() protoreflect.Message {
	mi := &file_messages_v1_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledTime.ProtoReflect.Descriptor instead.
func (*ScheduledTime) Descriptor() ([]byte, []int) {
	return file_messages_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduledTime) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ScheduledTime) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ScheduledTime) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *ScheduledTime) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *ScheduledTime) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ScheduledTime) GetUtcOffset() *durationpb.Duration {
	if x != nil {
		return x.UtcOffset
	}
	return nil
}

var File_messages_v1_message_proto protoreflect.FileDescriptor

var file_messages_v1_message_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0c,
	0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0x0c, 0x0a, 0x0a,
	0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x50, 0x69, 0x6c, 0x6c, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3f, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x30, 0x0a, 0x04, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x75, 0x74, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0xa0, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x79, 0x2f, 0x67, 0x6f, 0x61,
	0x6b, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa,
	0x02, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_v1_message_proto_rawDescOnce sync.Once
	file_messages_v1_message_proto_rawDescData = file_messages_v1_message_proto_rawDesc
)

func file_messages_v1_message_proto_rawDescGZIP() []byte {
	file_messages_v1_message_proto_rawDescOnce.Do(func() {
		file_messages_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_v1_message_proto_rawDescData)
	})
	return file_messages_v1_message_proto_rawDescData
}

var file_messages_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_messages_v1_message_proto_goTypes = []interface{}{
	(*Terminated)(nil),            // 0: messages.v1.Terminated
	(*PoisonPill)(nil),            // 1: messages.v1.PoisonPill
	(*Scheduled)(nil),             // 2: messages.v1.Scheduled
	(*ScheduledOnce)(nil),         // 3: messages.v1.ScheduledOnce
	(*ScheduledRepeatedly)(nil),   // 4: messages.v1.ScheduledRepeatedly
	(*ScheduledFrequency)(nil),    // 5: messages.v1.ScheduledFrequency
	(*ScheduledTime)(nil),         // 6: messages.v1.ScheduledTime
	(*anypb.Any)(nil),             // 7: google.protobuf.Any
	(*v1.Address)(nil),            // 8: address.v1.Address
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 10: google.protobuf.Duration
}
var file_messages_v1_message_proto_depIdxs = []int32{
	7,  // 0: messages.v1.Scheduled.message:type_name -> google.protobuf.Any
	8,  // 1: messages.v1.Scheduled.sender:type_name -> address.v1.Address
	8,  // 2: messages.v1.Scheduled.receiver:type_name -> address.v1.Address
	5,  // 3: messages.v1.Scheduled.frequency:type_name -> messages.v1.ScheduledFrequency
	9,  // 4: messages.v1.ScheduledOnce.when:type_name -> google.protobuf.Timestamp
	6,  // 5: messages.v1.ScheduledRepeatedly.when:type_name -> messages.v1.ScheduledTime
	3,  // 6: messages.v1.ScheduledFrequency.once:type_name -> messages.v1.ScheduledOnce
	4,  // 7: messages.v1.ScheduledFrequency.repeatedly:type_name -> messages.v1.ScheduledRepeatedly
	10, // 8: messages.v1.ScheduledTime.utc_offset:type_name -> google.protobuf.Duration
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_messages_v1_message_proto_init() }
func file_messages_v1_message_proto_init() {
	if File_messages_v1_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_v1_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Terminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoisonPill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledRepeatedly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledFrequency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_v1_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_v1_message_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ScheduledFrequency_Once)(nil),
		(*ScheduledFrequency_Repeatedly)(nil),
	}
	file_messages_v1_message_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_v1_message_proto_goTypes,
		DependencyIndexes: file_messages_v1_message_proto_depIdxs,
		MessageInfos:      file_messages_v1_message_proto_msgTypes,
	}.Build()
	File_messages_v1_message_proto = out.File
	file_messages_v1_message_proto_rawDesc = nil
	file_messages_v1_message_proto_goTypes = nil
	file_messages_v1_message_proto_depIdxs = nil
}
