name: build

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/README.md"
      - "**/renovate.json5"
      - "**/scorecard.yml"
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Linux shards run first
  tests-linux:
    name: Linux Tests Shard ${{ matrix.shard }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3] # adjust number of shards here
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          check-latest: true
          cache-dependency-path: "**/*.sum"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Vendoring and Tidy
        run: go mod tidy && go mod vendor

      - name: Install dependencies
        run: go mod download

      - name: Prepare packages for this shard
        id: shard-assign
        run: |
          set -euo pipefail
          SHARDS=3
          shard_id=${{ matrix.shard }}
          
          HEAVY_PKG="./actor"
          
          ALL_PKGS=$(go list -mod=vendor ./... | grep -v "$HEAVY_PKG" | grep -v -E "(goaktpb|mocks|internal/internalpb)")
          
          HEAVY_TESTS=$(go test -list . $HEAVY_PKG | grep ^Test || true)
          if [ -z "$HEAVY_TESTS" ]; then
          echo "No tests found in $HEAVY_PKG"
          exit 1
          fi
          
          HEAVY_SUBSET=$(echo "$HEAVY_TESTS" | awk "NR % $SHARDS == $((shard_id-1))" | paste -sd'|' -)
          OTHER_PKGS=$(echo "$ALL_PKGS" | awk "NR % $SHARDS == $((shard_id-1))")
          
          HEAVY_SUBSET_SAFE=$(echo "$HEAVY_SUBSET" | tr '\n' '|' | sed 's/"/\\"/g')
          OTHER_PKGS_SAFE=$(echo "$OTHER_PKGS" | tr '\n' ' ' | sed 's/"/\\"/g')
          
          echo "HEAVY_PKG=$HEAVY_PKG" >> $GITHUB_ENV
          echo "HEAVY_SUBSET=$HEAVY_SUBSET_SAFE" >> $GITHUB_ENV
          echo "OTHER_PKGS=$OTHER_PKGS_SAFE" >> $GITHUB_ENV

      - name: Run heavy package subset
        if: env.HEAVY_SUBSET != ''
        run: |
          go test -mod=vendor -p 1 -timeout 0 -race -v \
            -coverprofile=coverage.${{ matrix.shard }}.out \
            -covermode=atomic -coverpkg=./... \
            $HEAVY_PKG -run "$HEAVY_SUBSET"

      - name: Run other packages
        if: env.OTHER_PKGS != ''
        run: |
          go test -mod=vendor -p 1 -timeout 0 -race -v \
            -coverprofile=coverage.${{ matrix.shard }}-other.out \
            -covermode=atomic -coverpkg=./... \
            $OTHER_PKGS

      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.${{ matrix.shard }}*.out
          flags: shard-${{ matrix.shard }}
          fail_ci_if_error: false

  # macOS & Windows run only if Linux shards succeed
  tests-other-os:
    needs: tests-linux
    if: ${{ needs.tests-linux.result == 'success' }}
    name: Tests on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            runner: macos-13
          - os: windows
            runner: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          check-latest: true
          cache-dependency-path: "**/*.sum"
      - run: go test -mod=vendor -p 1 -timeout 0 -race -v ./...

  lint:
    name: Linter (Linux only)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"
          check-latest: true
          cache-dependency-path: "**/*.sum"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.0
          args: --timeout 10m --config .golangci.yml
