syntax = "proto3";

package goakt.v1;

import "messages/v1/address.proto";

option go_package = "github.com/tochemey/goakt/internal/goakt/v1;goaktv1";

// RaftService represents the http based key-value store backed by raft
service RaftService {
  // PutActor persists an actor into the distributed store
  rpc PutActor(PutActorRequest) returns (PutActorResponse);
  // GetActor reads the content of a given actor
  rpc GetActor(GetActorRequest) returns (GetActorResponse);
  // AddNode adds a new node to the cluster.
  rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
  // RemoveNode removes a node from the cluster
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse);
}

// AddNodeRequest is used to add a node to the cluster
// through the cluster events
message AddNodeRequest {
  // Specifies the node id
  uint64 node_id = 1;
  // Specifies the node address
  string address = 2;
}

// AddNodeResponse is the response to AddNodeRequest
message AddNodeResponse {}

// RemoveNodeRequest is used to remove a node from the cluster
// through the cluster events
message RemoveNodeRequest {
  // Specifies the node id
  uint64 node_id = 1;
  // Specifies the node address
  string address = 2;
}

// RemoveNodeResponse is the response to the RemoveNodeRequest
message RemoveNodeResponse {}

// PutActorRequest is the put actor request
message PutActorRequest {
  // Specifies the wire actor to put
  WireActor actor = 1;
}

// PutActorResponse is the response to put actor request
message PutActorResponse {}

// GetActorRequest is used to fetch an actor from the cluster
message GetActorRequest {
  // Specifies the actor name
  string actor_name = 1;
}

// GetActorResponse is the response of GetActorRequest
message GetActorResponse {
  // Specifies the actor
  WireActor actor = 1;
}

message WireActors {
  // Specifies raft FSM entries
  map<string, WireActor> actors = 1;
}

// WireActor represents the actor information on the
// wire
message WireActor {
  // Specifies the actor name.
  // The actor name can be either the actor FQN or an alias
  string actor_name = 1;
  // Specifies the actor address
  messages.v1.Address actor_address = 2;
  // Specifies the actor payload. The payload is used
  // to recreate this actor in case the node hosting the actor is dead and we want to recreate the given actor
  // on another node of the cluster
  bytes actor_payload = 3;
}

message Peer {
  // Specifies the peer unique id which a uuid
  string peer_uuid = 1;
  // Specifies the peer name
  string name = 2;
  // Specifies the addresses of the peer
  repeated string addresses = 3;
  // Specifies the client addresses
  repeated string client_addresses = 4;

}
