syntax = "proto3";

package goakt.v1;

import "google/protobuf/any.proto";
import "messages/v1/address.proto";
import "messages/v1/messages.proto";

option go_package = "github.com/tochemey/goakt/internal/goakt/v1;goaktv1";

service RemoteMessagingService {
  // RemoteAsk is used to send a message to an actor remotely and expect a response
  // immediately. With this type of message the receiver cannot communicate back to Sender
  // except reply the message with a response. This one-way communication
  rpc RemoteAsk(RemoteAskRequest) returns (RemoteAskResponse);
  // RemoteTell is used to send a message to an actor remotely by another actor
  // This is the only way remote actors can interact with each other. The actor on the
  // other line can reply to the sender by using the Sender in the message
  rpc RemoteTell(RemoteTellRequest) returns (RemoteTellResponse);
  // Lookup for an actor on a remote host.
  rpc RemoteLookup(RemoteLookupRequest) returns (RemoteLookupResponse);
}

// RemoteAsk is used to send a message to an actor remotely and expect a response
// immediately. With this type of message the receiver cannot communicate back to Sender
// except reply the message with a response. This one-way communication
message RemoteAskRequest {
  messages.v1.RemoteMessage remote_message = 1;
}

message RemoteAskResponse {
  // Specifies the message to send to the actor
  // Any proto message is allowed to be sent
  google.protobuf.Any message = 1;
}

// RemoteTell is used to send a message to an actor remotely by another actor
// This is the only way remote actors can interact with each other. The actor on the
// other line can reply to the sender by using the Sender in the message
message RemoteTellRequest {
  messages.v1.RemoteMessage remote_message = 1;
}

message RemoteTellResponse {}

// RemoteLookupRequest checks whether a given actor exists on a remote host
message RemoteLookupRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
}

message RemoteLookupResponse {
  // Specifies the actor address
  messages.v1.Address address = 1;
}
