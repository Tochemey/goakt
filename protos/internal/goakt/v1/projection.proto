syntax = "proto3";

package goakt.v1;

message Offset {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // Specifies the projection name.
  string projection_name = 2;
  // Specifies the current_offset
  // The current offset should match the sequence number of the given event consumed by the
  // projection
  uint64 current_offset = 3;
  // Specifies the timestamp
  int64 timestamp = 4;
}

// ProjectionRecoveryStrategy  is used to recover from unhandled exceptions without causing the projection to fail
enum ProjectionRecoveryStrategy {
  // States that if the first attempt to invoke the handler fails it will immediately give up and fail the projection
  FAIL = 0;
  // States that if he first attempt to invoke the handler fails it will retry invoking the handler with the
  // same envelope this number of `retries` with the `delay` between each attempt. It will give up
  // and fail the projection if all attempts fail. For this to work as expected one need to define the `retries` and `delay`
  // settings in the projection configuration.
  RETRY_AND_FAIL = 1;
  // States that if the first attempt to invoke the handler fails it will immediately give up, discard the envelope and
  // continue with next. This will commit the offset assuming the event has been successfully processed.
  // Use this strategy with care.
  SKIP = 2;
  // States that if he first attempt to invoke the handler fails it will retry invoking the handler with the
  // same envelope this number of `retries` with the `delay` between each attempt. It will give up,
  // discard the element and continue with next if all attempts fail.
  // For this to work as expected one need to define the `retries` and `delay` settings in the projection configuration.
  RETRY_AND_SKIP = 3;
}
