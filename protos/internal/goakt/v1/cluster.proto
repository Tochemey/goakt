syntax = "proto3";

package goakt.v1;

// NodeStateReplicationService helps replicate each node state across the cluster
service NodeStateReplicationService {
  rpc PutNodeState(PutNodeStateRequest) returns (PutNodeStateResponse);
  rpc GetNodeState(GetNodeStateRequest) returns (GetNodeStateResponse);
}


message ActorMeta {
  // Specifies the kind. This is basically the type of actor
  string actor_kind = 1;
  // Specifies the actor id
  string actor_id = 2;
  // Specifies the actor interface type
  bytes actor_type = 3;
}

// NodeState holds the node internal state
// Each Node hosting a single actor system has a state that depicts the actual state of the Actor system.
// Having that state helps replicate it across the cluster. In case a node goes down we can easily replay that state on another
// node to get the system going
message NodeState {
  // Specifies the map between the node id and the various actor meta on that node
  map<string, ActorMeta> states = 1;
}

message PutNodeStateRequest {
  // Specifies the node key
  string node_id = 1;
  // Specifies the actor meta
  ActorMeta actor_meta = 2;
}

message PutNodeStateResponse {
  // Specifies the NodeState
  NodeState state = 1;
}

message GetNodeStateRequest {
  // Specifies the node key
  string node_id = 1;
}

message GetNodeStateResponse {
  // Specifies the NodeState
  NodeState state = 1;
}
