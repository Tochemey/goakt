syntax = "proto3";

package internalpb;

import "goakt/goakt.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "internal/dependency.proto";
import "internal/grain.proto";
import "internal/passivation.proto";

option go_package = "github.com/tochemey/goakt/v3/internal/internalpb;internalpb";

// RemotingService defines the remoting service
// With remoting one can:
// - send messages to actors
// - lookup actor remotely
// - spawn actor remotely
// - re-spawn actor remotely
// - stop actor remotely
service RemotingService {
  // RemoteAsk is used to send a message to an actor remotely and expect a response immediately.
  rpc RemoteAsk(RemoteAskRequest) returns (RemoteAskResponse);
  // RemoteTell is used to send a message to a remote actor
  // The actor on the other line can reply to the sender by using the Sender in the message
  rpc RemoteTell(RemoteTellRequest) returns (RemoteTellResponse);
  // Lookup for an actor on a remote host.
  rpc RemoteLookup(RemoteLookupRequest) returns (RemoteLookupResponse);
  // RemoteReSpawn restarts an actor on a remote machine
  rpc RemoteReSpawn(RemoteReSpawnRequest) returns (RemoteReSpawnResponse);
  // RemoteStop stops an actor on a remote machine
  rpc RemoteStop(RemoteStopRequest) returns (RemoteStopResponse);
  // RemoteSpawn starts an actor on a remote machine
  rpc RemoteSpawn(RemoteSpawnRequest) returns (RemoteSpawnResponse);
  // RemoteReinstate reinstates an actor on a remote machine
  rpc RemoteReinstate(RemoteReinstateRequest) returns (RemoteReinstateResponse);
  // RemoteAskGrain is used to send a message to Grain on a remote node
  rpc RemoteAskGrain(RemoteAskGrainRequest) returns (RemoteAskGrainResponse);
  // RemoteTellGrain is used to send a message to Grain on a remote node
  rpc RemoteTellGrain(RemoteTellGrainRequest) returns (RemoteTellGrainResponse);
  // RemoteActivateGrain is used to activate a Grain on a remote node
  rpc RemoteActivateGrain(RemoteActivateGrainRequest) returns (RemoteActivateGrainResponse);
}

// RemoteAsk is used to send a message to an actor remotely and expect a response
// immediately.
message RemoteAskRequest {
  // Specifies the remote message to send
  repeated RemoteMessage remote_messages = 1;
  // Specifies the timeout(how long to wait for a reply)
  google.protobuf.Duration timeout = 2;
}

message RemoteAskResponse {
  // Specifies the message to send to the actor
  // Any proto message is allowed to be sent
  repeated google.protobuf.Any messages = 1;
}

// RemoteTell is used to send a message to an actor remotely
message RemoteTellRequest {
  // Specifies the remote message to send
  repeated RemoteMessage remote_messages = 1;
}

message RemoteTellResponse {}

// RemoteLookupRequest checks whether a given actor exists on a remote host
message RemoteLookupRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
}

message RemoteLookupResponse {
  // Specifies the actor address
  goaktpb.Address address = 1;
}

// RemoteMessage will be used by Actors to communicate remotely
message RemoteMessage {
  // Specifies the sender' address
  goaktpb.Address sender = 1;
  // Specifies the actor address
  goaktpb.Address receiver = 2;
  // Specifies the message to send to the actor
  // Any proto message is allowed to be sent
  google.protobuf.Any message = 3;
}

message RemoteReSpawnRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
}

message RemoteReSpawnResponse {}

message RemoteStopRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
}

message RemoteStopResponse {}

message RemoteSpawnRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name.
  string actor_name = 3;
  // Specifies the actor type
  string actor_type = 4;
  // Specifies if the actor is a singleton
  bool is_singleton = 5;
  // Specifies if the actor is relocatable
  bool relocatable = 6;
  // Specifies the passivation strategy
  PassivationStrategy passivation_strategy = 7;
  // Specifies the dependencies
  repeated internalpb.Dependency dependencies = 8;
  //  States whether the actor will require a stash buffer
  bool enable_stash = 9;
}

message RemoteSpawnResponse {}

message RemoteReinstateRequest {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
}

message RemoteReinstateResponse {}

message RemoteAskGrainRequest {
  Grain grain = 1;
  optional GrainId sender = 2;
  optional google.protobuf.Duration request_timeout = 3;
  google.protobuf.Duration passivate_after = 4;
  repeated internalpb.Dependency dependencies = 5;
  google.protobuf.Any message = 6;
}

message RemoteAskGrainResponse {
  google.protobuf.Any message = 1;
}

message RemoteTellGrainRequest {
  Grain grain = 1;
  optional GrainId sender = 2;
  google.protobuf.Duration passivate_after = 3;
  repeated internalpb.Dependency dependencies = 4;
  google.protobuf.Any message = 5;
  optional google.protobuf.Duration request_timeout = 6;
}

message RemoteTellGrainResponse {}

message RemoteActivateGrainRequest {
  Grain grain = 1;
  repeated internalpb.Dependency dependencies = 4;
}

message RemoteActivateGrainResponse {}
