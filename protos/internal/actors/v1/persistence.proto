syntax = "proto3";

package actors.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

message Journal {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // Specifies the sequence number
  uint64 sequence_number = 2;
  // Specifies the deletion state
  bool is_deleted = 3;
  // Specifies the payload manifest
  string payload_manifest = 4;
  // Specifies the payload to persist
  bytes payload = 5;
  // Specifies the timestamp
  google.protobuf.Timestamp timestamp = 6;
  // Specifies the writer ID
  // Often times persistence envelopes will be written to the data store asynchronously
  // TODO need to confirm this feature
  string writer_id = 7;
}

message Snapshot {
  // Specifies the persistence unique identifier
  string persistence_id = 1;
  // Specifies the sequence number
  uint64 sequence_number = 2;
  // Specifies the payload manifest
  string payload_manifest = 4;
  // Specifies the payload to persist
  bytes payload = 5;
  // Specifies the timestamp
  google.protobuf.Timestamp timestamp = 6;
}

// SnapshotCriteria helps load/delete snapshots
message SnapshotCriteria {
  // Specifies the upper bound for a selected snapshot's sequence number. Default is no upper bound, i.e the math.MaxUint64.
  uint64 max_sequence_number = 1;
  // Specifies the upper bound for a selected snapshot's timestamp. Default is no upper bound, i.e the math.MaxUint64.
  uint64 max_timestamp = 2;
  // Specifies the lower bound for a selected snapshot's sequence number. Default is no lower bound, i.e 0L
  uint64 min_sequence_number = 3;
  // Specifies the lower bound for a selected snapshot's timestamp. Default is no lower bound, i.e 0L
  uint64 min_timestamp = 4;
}

message ErrorReply {
  // Specifies the error message
  string message = 1;
}

message CommandReply {
  // the actual command reply
  oneof reply {
    // actual state is wrapped with meta data
    State state = 1;
    // gRPC failure
    ErrorReply error = 2;
    // NoReply
    NoReply no_reply = 3;
  }
}

message NoReply {}

// GetStateCommand tells the PersistentActor
// to reply with its latest state
message GetStateCommand{}

// Wrap the aggregate state and the meta data.
message State {
  // the entity state
  google.protobuf.Any state = 1;
  // metadata from the event that made this state
  MetaData meta = 3;
}

// Event is an event wrapper that holds both the
// event and the corresponding aggregate root state.
message Event {
  // the event emitted
  google.protobuf.Any event = 1;
  // the state obtained from processing the event
  google.protobuf.Any resulting_state = 2;
  // meta data
  MetaData meta = 3;
}

// MetaData are additional data the enrich the aggregate state.
// This can help track information like the revision number, the last time the
// aggregate state has been modified(a.k.a revision date), etc...
message MetaData {
  // Specifies the persistence id
  string persitence_id = 1;
  // the revision number for the entity, increases sequentially
  // this is very useful to handle optimistic lock
  uint32 revision_number = 2;
  // the time the state has been modified
  google.protobuf.Timestamp revision_date = 3;
}
