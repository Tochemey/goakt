syntax = "proto3";

package goaktpb;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tochemey/goakt/v3/goaktpb;goaktpb";

// Address represents an actor address
message Address {
  // Specifies the remote host address
  string host = 1;
  // Specifies the remote port
  int32 port = 2;
  // Specifies the actor name
  string name = 3;
  // Specifies the actor unique id
  string id = 4;
  // Specifies the actor system
  string system = 5;
  // Specifies the parent address
  Address parent = 6;
}

// Deadletter defines the deadletter event
message Deadletter {
  // Specifies the sender's address
  Address sender = 1;
  // Specifies the actor address
  Address receiver = 2;
  // Specifies the message to send to the actor
  // Any proto message is allowed to be sent
  google.protobuf.Any message = 3;
  // Specifies the message send time
  google.protobuf.Timestamp send_time = 4;
  // Specifies the reason why the deadletter
  string reason = 5;
}

// ActorStarted defines the actor started event
message ActorStarted {
  // Specifies the actor address
  Address address = 1;
  // Specifies the started time
  google.protobuf.Timestamp started_at = 2;
}

// ActorStopped defines the actor stopped event
message ActorStopped {
  // Specifies the actor address
  Address address = 1;
  // Specifies the stop time
  google.protobuf.Timestamp stopped_at = 2;
}

// ActorPassivated define the actor passivated event
message ActorPassivated {
  // Specifies the actor address
  Address address = 1;
  // Specifies the passivation time
  google.protobuf.Timestamp passivated_at = 2;
}

// ActorChildCreated defines the child actor created event
message ActorChildCreated {
  // Specifies the actor address
  Address address = 1;
  // Specifies the parent address
  Address parent = 2;
  // Specifies the started time
  google.protobuf.Timestamp created_at = 3;
}

// ActorRestarted defines the actor restarted event
message ActorRestarted {
  // Specifies the actor address
  Address address = 1;
  // Specifies the restarted time
  google.protobuf.Timestamp restarted_at = 2;
}

// ActorSuspended defines the actor suspended event
message ActorSuspended {
  // Specifies the actor address
  Address address = 1;
  // Specifies the suspended time
  google.protobuf.Timestamp suspended_at = 2;
  // Specifies the suspension reason
  string reason = 3;
}

// ActorReinstated is triggered when an actor is reinstated
message ActorReinstated {
  // Specifies the actor address
  Address address = 1;
  // Specifies the reinstated time
  google.protobuf.Timestamp reinstated_at = 2;
}

// NodeJoined defines the node joined event
message NodeJoined {
  // Specifies the node address
  string address = 1;
  // Specifies the timestamp
  google.protobuf.Timestamp timestamp = 2;
}

// NodeLeft defines the node left event
message NodeLeft {
  // Specifies the node address
  string address = 1;
  // Specifies the timestamp
  google.protobuf.Timestamp timestamp = 2;
}

// Terminated is a lifecycle notification message sent to all actors
// that are watching a given actor when it has stopped or been terminated.
//
// This message allows supervising or dependent actors to react to the shutdown
// of the actor they were observingâ€”for example, by cleaning up resources,
// restarting the actor, or triggering failover behavior.
message Terminated {
  // Specifies the actor address
  Address address = 1;
  // Specifies the reinstated time
  google.protobuf.Timestamp terminated_at = 2;
}

// PoisonPill is a special control message used to gracefully stop an actor.
//
// When an actor receives a PoisonPill, it will initiate a controlled shutdown sequence.
// The PoisonPill is enqueued in the actor's mailbox like any other message, meaning:
// - It will not interrupt message processing.
// - It will only be handled after all previously enqueued messages are processed.
//
// This allows the actor to finish processing in-flight work before termination,
// ensuring clean shutdown semantics without abrupt interruptions.
message PoisonPill {}

// PostStart is used when an actor has successfully started
message PostStart {}

// Broadcast is used to send message to a router
message Broadcast {
  // Specifies the actual message
  google.protobuf.Any message = 1;
}

// Subscribe is used to subscribe to a topic by an actor
// The actor will receive an acknoledgement message
// when the subscription is successful
message Subscribe {
  // Specifies the topic to subscribe to
  string topic = 1;
}

// Unsubscribe is used to unsubscribe from a topic by an actor
// The actor will receive an acknoledgement message
// when the unsubscription is successful
message Unsubscribe {
  // Specifies the topic to unsubscribe from
  string topic = 1;
}

// SubscribeAck is used to acknowledge a successful subscription
// to a topic by an actor
message SubscribeAck {
  // Specifies the topic that was subscribed to
  string topic = 1;
}

// UnsubscribeAck is used to acknowledge a successful unsubscription
// from a topic by an actor
message UnsubscribeAck {
  // Specifies the topic that was unsubscribed from
  string topic = 1;
}

// Publish is used to send a message to a topic
// by the TopicActor. The message
// will be broadcasted to all actors that are subscribed
// to the topic in the cluster.
message Publish {
  // Specifies the message unique id
  string id = 1;
  // Specifies the topic
  string topic = 2;
  // Specifies the message
  google.protobuf.Any message = 3;
}

// NoMessage is used to indicate that no message was sent
message NoMessage {}

// PanicSignal is a system-level message used in actor-based systems to notify a parent actor
// that one of its child actors has encountered a critical failure or unhandled condition.
// This message is automatically sent when the Escalate supervision directive is invoked,
// indicating that the issue cannot be handled at the child level.
//
// The child actor is suspended, and the parent actor is expected to take appropriate action.
// Upon receiving a PanicSignal, the parent actor can decide how to handle the failure,
// such as restarting the child, stopping it, escalating further, or applying custom recovery logic.
message PanicSignal {
  // The original message that triggered the failure. This is useful for debugging
  // or retrying the operation once the issue is resolved.
  google.protobuf.Any message = 1;

  // A human-readable explanation of the failure, typically extracted from the exception
  // or error condition that led to the escalation.
  string reason = 2;

  // The UTC timestamp indicating when the PanicSignal event occurred. This helps in correlating
  // logs or monitoring data for incident analysis and resolution timelines.
  google.protobuf.Timestamp timestamp = 3;
}

// PausePassivation is a system-level message used to pause the passivation of an actor.
// One can send this message to an actor to prevent it from being passivated when passivation is enabled.
// This is useful in scenarios where an actor needs to remain active for a certain period while processing
// critical messages or performing important tasks. This is a fire-and-forget message, so it does not expect a response.
// This will no-op if the actor does not have passivation enabled.
message PausePassivation {}

// ResumePassivation is a system-level message used to resume the passivation of an actor.
// One can send this message to an actor to allow it to be passivated again after it has been paused.
// This is useful in scenarios where an actor has temporarily paused its passivation
// to complete critical tasks or handle important messages, and now it can return to its normal
// passivation behavior. This is a fire-and-forget message, so it does not expect a response.
//
// This will no-op if the actor does not have passivation enabled.
// If the actor is not created with a custom passivation timeout, it will use the default passivation timeout.
message ResumePassivation {}
